/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package load.file;

import com.ucod.lang.LocaleChangeListener;
import com.ucod.lang.LocaleUtil;
import dbupdater.UpToDate;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.Connection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxEditor;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JPanel;
import javax.swing.text.DateFormatter;
import javax.swing.text.MaskFormatter;
import load.file.ConfigProperties.ConfigFile;
import static load.file.ConfigProperties.ConfigFile.FileType.ITENS_MGV;
import static load.file.ConfigProperties.ConfigFile.FileType.SYSTEL;
import static load.file.FileLoader.getCon;
import static load.file.MainApp.isWindows;
import static load.file.MainApp.supportedLocales;
import load.file.Utils.ComboItem;

/**
 *
 * @author gcastillo
 */
public class ShowConfigs extends javax.swing.JDialog implements LocaleChangeListener {

    ConfigProperties configs;
    boolean bIsLoadCbo = true;
CustomLogger customLogger = CustomLogger.getInstance();
    /**
     * Creates new form ShowConfigs
     */
    public ShowConfigs() {

        initComponents();
        LoadConfigPropFile(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        btnDeleteIp = new javax.swing.JButton();
        btnAddingIp = new javax.swing.JButton();
        cbIps = new javax.swing.JComboBox<>();
        rbAutoDiscoverScale = new javax.swing.JRadioButton();
        cbLang = new javax.swing.JComboBox();
        lblIps = new javax.swing.JLabel();
        lblIdioma = new javax.swing.JLabel();
        lblRutaLog = new javax.swing.JLabel();
        txtRutaLog = new javax.swing.JTextField();
        btnFindLog = new javax.swing.JButton();
        lblRutaPsql = new javax.swing.JLabel();
        txtRutaPsql = new javax.swing.JTextField();
        btnFindPsql = new javax.swing.JButton();
        jPImportacion = new javax.swing.JPanel();
        lblFormatoEntrada = new javax.swing.JLabel();
        cbx_file_format = new javax.swing.JComboBox<>();
        JPItensMGV = new javax.swing.JPanel();
        txtItensMGVRutaImportarNovedades = new javax.swing.JTextField();
        btnItensMGVFindPathPartial = new javax.swing.JButton();
        lblRutaImportarNovedades1 = new javax.swing.JLabel();
        chkDeleteFileInputMGV = new javax.swing.JCheckBox();
        lblItensMGVRutaRecetas = new javax.swing.JLabel();
        txtItensMGVRutaRecetas = new javax.swing.JTextField();
        btnItensMGVRutaRecetas = new javax.swing.JButton();
        lblItensMGVRutaNutInfo = new javax.swing.JLabel();
        txtItensMGVRutaNutInfo = new javax.swing.JTextField();
        btnItensMGVRutaNutInfo = new javax.swing.JButton();
        lblItensMGVTara = new javax.swing.JLabel();
        txtItensMGVRutaTara = new javax.swing.JTextField();
        btnItensMGVTara = new javax.swing.JButton();
        lblItensMGVConservacion = new javax.swing.JLabel();
        txtItensMGVRutaConservacion = new javax.swing.JTextField();
        btnItensMGVConservacion = new javax.swing.JButton();
        lblItensMGVExtra2 = new javax.swing.JLabel();
        txtItensMGVRutaExtra2 = new javax.swing.JTextField();
        btnItensMGVExtra2 = new javax.swing.JButton();
        lblItensMGVIngredients = new javax.swing.JLabel();
        txtItensMGVRutaIngredients = new javax.swing.JTextField();
        btnItensMGVIngredients = new javax.swing.JButton();
        btnItensMGVIngredients1 = new javax.swing.JButton();
        txtItensMGVRutaIngredients1 = new javax.swing.JTextField();
        lblItensMGVIngredients1 = new javax.swing.JLabel();
        JPDBImport = new javax.swing.JPanel();
        lblDBType = new javax.swing.JLabel();
        cbDBType = new javax.swing.JComboBox<>();
        lblDBName = new javax.swing.JLabel();
        txtDBName = new javax.swing.JTextField();
        lblDBIP = new javax.swing.JLabel();
        txtDBIP = new javax.swing.JTextField();
        lblDBPort = new javax.swing.JLabel();
        txtDBPort = new javax.swing.JTextField();
        lblDBUser = new javax.swing.JLabel();
        txtDBUser = new javax.swing.JTextField();
        lblDBPass = new javax.swing.JLabel();
        txtDBPass = new javax.swing.JPasswordField();
        txtDBQuery = new javax.swing.JTextArea();
        lblDBQuery = new javax.swing.JLabel();
        btnDBTest = new javax.swing.JButton();
        lblDBTestResult = new javax.swing.JLabel();
        btnFindDBPath = new javax.swing.JButton();
        JPFileImport = new javax.swing.JPanel();
        txtRutaImportarNovedades = new javax.swing.JTextField();
        btnFindPathPartial = new javax.swing.JButton();
        btnFindPathFull = new javax.swing.JButton();
        txtRutaImportar = new javax.swing.JTextField();
        lblRutaImportar = new javax.swing.JLabel();
        lblSeparador = new javax.swing.JLabel();
        lblRutaImportarNovedades = new javax.swing.JLabel();
        txtSeparador = new javax.swing.JTextField();
        txtRutaImportarRangos = new javax.swing.JTextField();
        lblRutaImportarRangos = new javax.swing.JLabel();
        btnFindPathRange = new javax.swing.JButton();
        chkDeleteFileInput = new javax.swing.JCheckBox();
        btnFindPathlabels = new javax.swing.JButton();
        txtRutalabels = new javax.swing.JTextField();
        lblRutalabels = new javax.swing.JLabel();
        JPItensERPtoMGV = new javax.swing.JPanel();
        chkDeleteFileInputERPtoMGV = new javax.swing.JCheckBox();
        lblRutaImportar1 = new javax.swing.JLabel();
        txtItensMGVRutaImportar = new javax.swing.JTextField();
        btnItensMGVFindPathFull = new javax.swing.JButton();
        cbx_file_format1 = new javax.swing.JComboBox<>();
        JPDBImportEleventas = new javax.swing.JPanel();
        lblDBType1 = new javax.swing.JLabel();
        cbDBType1 = new javax.swing.JComboBox<>();
        lblDBName1 = new javax.swing.JLabel();
        txtDBName1 = new javax.swing.JTextField();
        lblDBIP1 = new javax.swing.JLabel();
        txtDBIP1 = new javax.swing.JTextField();
        lblDBPort1 = new javax.swing.JLabel();
        txtDBPort1 = new javax.swing.JTextField();
        lblDBUser1 = new javax.swing.JLabel();
        txtDBUser1 = new javax.swing.JTextField();
        lblDBPass1 = new javax.swing.JLabel();
        txtDBPass1 = new javax.swing.JPasswordField();
        txtDBQuery1 = new javax.swing.JTextField();
        lblDBQuery1 = new javax.swing.JLabel();
        btnDBTest1 = new javax.swing.JButton();
        lblDBTestResult1 = new javax.swing.JLabel();
        btnDBPath = new javax.swing.JButton();
        jPTemporizador = new javax.swing.JPanel();
        lblPeriod = new javax.swing.JLabel();
        cbxPeriod = new javax.swing.JComboBox<>();
        lblTimeValue = new javax.swing.JLabel();
        txtTimeValue = new javax.swing.JTextField();
        cbxTempHours = new javax.swing.JComboBox<>();
        btnAddHour = new javax.swing.JButton();
        btnDelHour = new javax.swing.JButton();
        lblTimeValue1 = new javax.swing.JLabel();
        jPMensajes = new javax.swing.JPanel();
        rbMostrarMensajes = new javax.swing.JRadioButton();
        cbxSendMail = new javax.swing.JCheckBox();
        lblMailAddress = new javax.swing.JLabel();
        txtMailAddress = new javax.swing.JTextField();
        lblMailPass = new javax.swing.JLabel();
        txtMailPass = new javax.swing.JPasswordField();
        lblMailDestiny = new javax.swing.JLabel();
        cbxMailDestiny = new javax.swing.JComboBox<>();
        btnMailDestAdd = new javax.swing.JButton();
        btnMailDestDel = new javax.swing.JButton();
        lblMailHost = new javax.swing.JLabel();
        lblMailPort = new javax.swing.JLabel();
        txtMailHost = new javax.swing.JTextField();
        txtMailPort = new javax.swing.JTextField();
        btnTestEmail = new javax.swing.JButton();
        lblTestMailResult = new javax.swing.JLabel();
        jPSeguridad = new javax.swing.JPanel();
        lblSegPass = new javax.swing.JLabel();
        txtSegPass = new javax.swing.JPasswordField();
        cbxAllowSecurity = new javax.swing.JCheckBox();
        jPQendra = new javax.swing.JPanel();
        cbxActivateQendra = new javax.swing.JCheckBox();
        cbxQendraDefaultPath = new javax.swing.JCheckBox();
        txtQendraPath = new javax.swing.JTextField();
        btnFindQendraPath = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("load/file/Bundle"); // NOI18N
        setTitle(bundle.getString("ShowConfigs.title")); // NOI18N
        setMaximumSize(new java.awt.Dimension(720, 800));
        setMinimumSize(new java.awt.Dimension(720, 800));
        setPreferredSize(new java.awt.Dimension(720, 800));
        setResizable(false);
        setSize(new java.awt.Dimension(720, 800));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDeleteIp.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnDeleteIp.setText(bundle.getString("ShowConfigs.btnDeleteIp.text")); // NOI18N
        btnDeleteIp.setPreferredSize(new java.awt.Dimension(120, 48));
        btnDeleteIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteIpActionPerformed(evt);
            }
        });
        jPanel2.add(btnDeleteIp, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 170, 100, -1));

        btnAddingIp.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnAddingIp.setText(bundle.getString("ShowConfigs.btnAddingIp.text")); // NOI18N
        btnAddingIp.setPreferredSize(new java.awt.Dimension(120, 48));
        btnAddingIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddingIpActionPerformed(evt);
            }
        });
        jPanel2.add(btnAddingIp, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 170, 100, -1));

        cbIps.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cbIps.setPreferredSize(new java.awt.Dimension(93, 48));
        jPanel2.add(cbIps, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 360, -1));

        rbAutoDiscoverScale.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        rbAutoDiscoverScale.setText(bundle.getString("ShowConfigs.rbAutoDiscoverScale.text")); // NOI18N
        rbAutoDiscoverScale.setPreferredSize(new java.awt.Dimension(145, 48));
        rbAutoDiscoverScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAutoDiscoverScaleActionPerformed(evt);
            }
        });
        jPanel2.add(rbAutoDiscoverScale, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 410, -1));

        cbLang.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbLangItemStateChanged(evt);
            }
        });
        jPanel2.add(cbLang, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 320, 48));

        lblIps.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblIps.setText(bundle.getString("ShowConfigs.lblIps.text")); // NOI18N
        jPanel2.add(lblIps, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 110, 50));

        lblIdioma.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblIdioma.setText(bundle.getString("ShowConfigs.lblIdioma.text")); // NOI18N
        lblIdioma.setName("lblSeparador"); // NOI18N
        lblIdioma.setPreferredSize(new java.awt.Dimension(120, 48));
        jPanel2.add(lblIdioma, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 140, 48));

        lblRutaLog.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblRutaLog.setText(bundle.getString("ShowConfigs.lblLogPath.text")); // NOI18N
        lblRutaLog.setToolTipText(bundle.getString("ShowConfigs.lblRutaLog.toolTipText")); // NOI18N
        lblRutaLog.setName("lblLogPath"); // NOI18N
        lblRutaLog.setPreferredSize(new java.awt.Dimension(120, 48));
        jPanel2.add(lblRutaLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 420, 48));

        txtRutaLog.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtRutaLog.setText(bundle.getString("ShowConfigs.txtRutaLog.text")); // NOI18N
        txtRutaLog.setPreferredSize(new java.awt.Dimension(120, 48));
        jPanel2.add(txtRutaLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 310, 48));

        btnFindLog.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnFindLog.setText(bundle.getString("ShowConfigs.btnFindLog.text")); // NOI18N
        btnFindLog.setPreferredSize(new java.awt.Dimension(120, 48));
        btnFindLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindLogActionPerformed(evt);
            }
        });
        jPanel2.add(btnFindLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 270, 100, 48));

        lblRutaPsql.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblRutaPsql.setText(bundle.getString("ShowConfigs.lblRutaPsql.text")); // NOI18N
        lblRutaPsql.setToolTipText(bundle.getString("ShowConfigs.lblRutaPsql.toolTipText")); // NOI18N
        lblRutaPsql.setName("lblLogPath"); // NOI18N
        lblRutaPsql.setPreferredSize(new java.awt.Dimension(120, 48));
        jPanel2.add(lblRutaPsql, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 420, 48));

        txtRutaPsql.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtRutaPsql.setText(bundle.getString("ShowConfigs.txtRutaPsql.text")); // NOI18N
        txtRutaPsql.setPreferredSize(new java.awt.Dimension(120, 48));
        jPanel2.add(txtRutaPsql, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 310, 48));

        btnFindPsql.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnFindPsql.setText(bundle.getString("ShowConfigs.btnFindPsql.text")); // NOI18N
        btnFindPsql.setPreferredSize(new java.awt.Dimension(120, 48));
        btnFindPsql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPsqlActionPerformed(evt);
            }
        });
        jPanel2.add(btnFindPsql, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 370, 100, 48));

        jTabbedPane1.addTab(bundle.getString("ShowConfigs.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jPImportacion.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblFormatoEntrada.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblFormatoEntrada.setText(bundle.getString("ShowConfigs.lblFormatoEntrada.text")); // NOI18N
        lblFormatoEntrada.setToolTipText(bundle.getString("ShowConfigs.lblFormatoEntrada.toolTipText")); // NOI18N
        lblFormatoEntrada.setName("lblLogPath"); // NOI18N
        lblFormatoEntrada.setPreferredSize(new java.awt.Dimension(120, 48));
        jPImportacion.add(lblFormatoEntrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 160, 48));

        cbx_file_format.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbx_file_format.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbx_file_formatItemStateChanged(evt);
            }
        });
        jPImportacion.add(cbx_file_format, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 196, 40));

        txtItensMGVRutaImportarNovedades.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtItensMGVRutaImportarNovedades.setText(bundle.getString("ShowConfigs.txtItensMGVRutaImportarNovedades.text")); // NOI18N
        txtItensMGVRutaImportarNovedades.setPreferredSize(new java.awt.Dimension(120, 48));

        btnItensMGVFindPathPartial.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnItensMGVFindPathPartial.setText(bundle.getString("ShowConfigs.btnItensMGVFindPathPartial.text")); // NOI18N
        btnItensMGVFindPathPartial.setPreferredSize(new java.awt.Dimension(120, 48));
        btnItensMGVFindPathPartial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItensMGVFindPathPartialActionPerformed(evt);
            }
        });

        lblRutaImportarNovedades1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblRutaImportarNovedades1.setText(bundle.getString("ShowConfigs.lblRutaImportarNovedades1.text")); // NOI18N
        lblRutaImportarNovedades1.setPreferredSize(new java.awt.Dimension(120, 48));

        chkDeleteFileInputMGV.setText(bundle.getString("ShowConfigs.chkDeleteFileInputMGV.text")); // NOI18N
        chkDeleteFileInputMGV.setActionCommand(bundle.getString("ShowConfigs.chkDeleteFileInputMGV.actionCommand")); // NOI18N
        chkDeleteFileInputMGV.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkDeleteFileInputMGVItemStateChanged(evt);
            }
        });

        lblItensMGVRutaRecetas.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblItensMGVRutaRecetas.setText(bundle.getString("ShowConfigs.lblItensMGVRutaRecetas.text")); // NOI18N
        lblItensMGVRutaRecetas.setPreferredSize(new java.awt.Dimension(120, 48));

        txtItensMGVRutaRecetas.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtItensMGVRutaRecetas.setText(bundle.getString("ShowConfigs.txtItensMGVRutaRecetas.text")); // NOI18N
        txtItensMGVRutaRecetas.setPreferredSize(new java.awt.Dimension(120, 48));

        btnItensMGVRutaRecetas.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnItensMGVRutaRecetas.setText(bundle.getString("ShowConfigs.btnItensMGVRutaRecetas.text")); // NOI18N
        btnItensMGVRutaRecetas.setPreferredSize(new java.awt.Dimension(120, 48));
        btnItensMGVRutaRecetas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItensMGVRutaRecetasActionPerformed(evt);
            }
        });

        lblItensMGVRutaNutInfo.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblItensMGVRutaNutInfo.setText(bundle.getString("ShowConfigs.lblItensMGVRutaNutInfo.text")); // NOI18N
        lblItensMGVRutaNutInfo.setPreferredSize(new java.awt.Dimension(120, 48));

        txtItensMGVRutaNutInfo.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtItensMGVRutaNutInfo.setText(bundle.getString("ShowConfigs.txtItensMGVRutaNutInfo.text")); // NOI18N
        txtItensMGVRutaNutInfo.setPreferredSize(new java.awt.Dimension(120, 48));

        btnItensMGVRutaNutInfo.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnItensMGVRutaNutInfo.setText(bundle.getString("ShowConfigs.btnItensMGVRutaNutInfo.text")); // NOI18N
        btnItensMGVRutaNutInfo.setPreferredSize(new java.awt.Dimension(120, 48));
        btnItensMGVRutaNutInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItensMGVRutaNutInfoActionPerformed(evt);
            }
        });

        lblItensMGVTara.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblItensMGVTara.setText(bundle.getString("ShowConfigs.lblItensMGVTara.text")); // NOI18N
        lblItensMGVTara.setPreferredSize(new java.awt.Dimension(120, 48));

        txtItensMGVRutaTara.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtItensMGVRutaTara.setText(bundle.getString("ShowConfigs.txtItensMGVRutaTara.text")); // NOI18N
        txtItensMGVRutaTara.setPreferredSize(new java.awt.Dimension(120, 48));

        btnItensMGVTara.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnItensMGVTara.setText(bundle.getString("ShowConfigs.btnItensMGVTara.text")); // NOI18N
        btnItensMGVTara.setPreferredSize(new java.awt.Dimension(120, 48));
        btnItensMGVTara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItensMGVTaraActionPerformed(evt);
            }
        });

        lblItensMGVConservacion.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblItensMGVConservacion.setText(bundle.getString("ShowConfigs.lblItensMGVConservacion.text")); // NOI18N
        lblItensMGVConservacion.setPreferredSize(new java.awt.Dimension(120, 48));

        txtItensMGVRutaConservacion.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtItensMGVRutaConservacion.setText(bundle.getString("ShowConfigs.txtItensMGVRutaConservacion.text")); // NOI18N
        txtItensMGVRutaConservacion.setPreferredSize(new java.awt.Dimension(120, 48));

        btnItensMGVConservacion.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnItensMGVConservacion.setText(bundle.getString("ShowConfigs.btnItensMGVConservacion.text")); // NOI18N
        btnItensMGVConservacion.setPreferredSize(new java.awt.Dimension(120, 48));
        btnItensMGVConservacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItensMGVConservacionActionPerformed(evt);
            }
        });

        lblItensMGVExtra2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblItensMGVExtra2.setText(bundle.getString("ShowConfigs.lblItensMGVExtra2.text")); // NOI18N
        lblItensMGVExtra2.setPreferredSize(new java.awt.Dimension(120, 48));

        txtItensMGVRutaExtra2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtItensMGVRutaExtra2.setText(bundle.getString("ShowConfigs.txtItensMGVRutaExtra2.text")); // NOI18N
        txtItensMGVRutaExtra2.setPreferredSize(new java.awt.Dimension(120, 48));

        btnItensMGVExtra2.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnItensMGVExtra2.setText(bundle.getString("ShowConfigs.btnItensMGVExtra2.text")); // NOI18N
        btnItensMGVExtra2.setPreferredSize(new java.awt.Dimension(120, 48));
        btnItensMGVExtra2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItensMGVExtra2ActionPerformed(evt);
            }
        });

        lblItensMGVIngredients.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblItensMGVIngredients.setText(bundle.getString("ShowConfigs.lblItensMGVIngredients.text")); // NOI18N
        lblItensMGVIngredients.setPreferredSize(new java.awt.Dimension(120, 48));

        txtItensMGVRutaIngredients.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtItensMGVRutaIngredients.setText(bundle.getString("ShowConfigs.txtItensMGVRutaIngredients.text")); // NOI18N
        txtItensMGVRutaIngredients.setPreferredSize(new java.awt.Dimension(120, 48));

        btnItensMGVIngredients.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnItensMGVIngredients.setText(bundle.getString("ShowConfigs.btnItensMGVIngredients.text")); // NOI18N
        btnItensMGVIngredients.setPreferredSize(new java.awt.Dimension(120, 48));
        btnItensMGVIngredients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItensMGVIngredientsActionPerformed(evt);
            }
        });

        btnItensMGVIngredients1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnItensMGVIngredients1.setText(bundle.getString("ShowConfigs.btnItensMGVIngredients1.text")); // NOI18N
        btnItensMGVIngredients1.setPreferredSize(new java.awt.Dimension(120, 48));
        btnItensMGVIngredients1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItensMGVIngredients1ActionPerformed(evt);
            }
        });

        txtItensMGVRutaIngredients1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtItensMGVRutaIngredients1.setText(bundle.getString("ShowConfigs.txtItensMGVRutaIngredients1.text")); // NOI18N
        txtItensMGVRutaIngredients1.setPreferredSize(new java.awt.Dimension(120, 48));

        lblItensMGVIngredients1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblItensMGVIngredients1.setText(bundle.getString("ShowConfigs.lblItensMGVIngredients1.text")); // NOI18N
        lblItensMGVIngredients1.setPreferredSize(new java.awt.Dimension(120, 48));

        javax.swing.GroupLayout JPItensMGVLayout = new javax.swing.GroupLayout(JPItensMGV);
        JPItensMGV.setLayout(JPItensMGVLayout);
        JPItensMGVLayout.setHorizontalGroup(
            JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPItensMGVLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPItensMGVLayout.createSequentialGroup()
                        .addComponent(txtItensMGVRutaImportarNovedades, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnItensMGVFindPathPartial, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblRutaImportarNovedades1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblItensMGVRutaRecetas, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(JPItensMGVLayout.createSequentialGroup()
                        .addComponent(txtItensMGVRutaRecetas, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnItensMGVRutaRecetas, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblItensMGVRutaNutInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(JPItensMGVLayout.createSequentialGroup()
                        .addComponent(txtItensMGVRutaNutInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnItensMGVRutaNutInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPItensMGVLayout.createSequentialGroup()
                        .addComponent(txtItensMGVRutaTara, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnItensMGVTara, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblItensMGVTara, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(JPItensMGVLayout.createSequentialGroup()
                        .addComponent(txtItensMGVRutaIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnItensMGVIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblItensMGVIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(JPItensMGVLayout.createSequentialGroup()
                        .addComponent(txtItensMGVRutaConservacion, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnItensMGVConservacion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblItensMGVConservacion, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(JPItensMGVLayout.createSequentialGroup()
                        .addComponent(txtItensMGVRutaExtra2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnItensMGVExtra2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblItensMGVExtra2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkDeleteFileInputMGV, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(JPItensMGVLayout.createSequentialGroup()
                        .addComponent(txtItensMGVRutaIngredients1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnItensMGVIngredients1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblItensMGVIngredients1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(252, Short.MAX_VALUE))
        );
        JPItensMGVLayout.setVerticalGroup(
            JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPItensMGVLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRutaImportarNovedades1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnItensMGVFindPathPartial, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtItensMGVRutaImportarNovedades, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblItensMGVRutaRecetas, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtItensMGVRutaRecetas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnItensMGVRutaRecetas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblItensMGVRutaNutInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnItensMGVRutaNutInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtItensMGVRutaNutInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblItensMGVTara, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnItensMGVTara, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtItensMGVRutaTara, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(lblItensMGVConservacion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnItensMGVConservacion, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtItensMGVRutaConservacion, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblItensMGVExtra2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnItensMGVExtra2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtItensMGVRutaExtra2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblItensMGVIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnItensMGVIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtItensMGVRutaIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblItensMGVIngredients1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPItensMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnItensMGVIngredients1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(txtItensMGVRutaIngredients1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(chkDeleteFileInputMGV)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPImportacion.add(JPItensMGV, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 680, 610));

        lblDBType.setText(bundle.getString("ShowConfigs.lblDBType.text")); // NOI18N

        cbDBType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbDBType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbDBTypeItemStateChanged(evt);
            }
        });

        lblDBName.setText(bundle.getString("ShowConfigs.lblDBName.text")); // NOI18N

        txtDBName.setText(bundle.getString("ShowConfigs.txtDBName.text")); // NOI18N
        txtDBName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDBNameActionPerformed(evt);
            }
        });

        lblDBIP.setText(bundle.getString("ShowConfigs.lblDBIP.text")); // NOI18N

        txtDBIP.setText(bundle.getString("ShowConfigs.txtDBIP.text")); // NOI18N

        lblDBPort.setText(bundle.getString("ShowConfigs.lblDBPort.text")); // NOI18N

        txtDBPort.setText(bundle.getString("ShowConfigs.txtDBPort.text")); // NOI18N
        txtDBPort.setToolTipText(bundle.getString("ShowConfigs.txtDBPort.toolTipText")); // NOI18N

        lblDBUser.setText(bundle.getString("ShowConfigs.lblDBUser.text")); // NOI18N

        txtDBUser.setText(bundle.getString("ShowConfigs.txtDBUser.text")); // NOI18N

        lblDBPass.setText(bundle.getString("ShowConfigs.lblDBPass.text")); // NOI18N

        txtDBPass.setText(bundle.getString("ShowConfigs.txtDBPass.text")); // NOI18N

        txtDBQuery.setLineWrap(true);
        txtDBQuery.setText(bundle.getString("ShowConfigs.txtDBQuery.text")); // NOI18N
        txtDBQuery.setWrapStyleWord(true);
        txtDBQuery.setAlignmentX(0.0F);
        txtDBQuery.setAlignmentY(0.0F);
        txtDBQuery.setAutoscrolls(false);

        lblDBQuery.setText(bundle.getString("ShowConfigs.lblDBQuery.text")); // NOI18N
        lblDBQuery.setToolTipText(bundle.getString("ShowConfigs.lblDBQuery.toolTipText")); // NOI18N

        btnDBTest.setText(bundle.getString("ShowConfigs.btnDBTest.text")); // NOI18N
        btnDBTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDBTestActionPerformed(evt);
            }
        });

        lblDBTestResult.setText(bundle.getString("ShowConfigs.lblDBTestResult.text")); // NOI18N

        btnFindDBPath.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnFindDBPath.setText(bundle.getString("ShowConfigs.btnFindDBPath.text")); // NOI18N
        btnFindDBPath.setPreferredSize(new java.awt.Dimension(120, 48));
        btnFindDBPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindDBPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPDBImportLayout = new javax.swing.GroupLayout(JPDBImport);
        JPDBImport.setLayout(JPDBImportLayout);
        JPDBImportLayout.setHorizontalGroup(
            JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPDBImportLayout.createSequentialGroup()
                .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPDBImportLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(JPDBImportLayout.createSequentialGroup()
                                .addComponent(lblDBType, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbDBType, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(JPDBImportLayout.createSequentialGroup()
                                .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblDBPass, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                    .addComponent(lblDBUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblDBPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblDBIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblDBName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDBName)
                                    .addComponent(txtDBIP)
                                    .addComponent(txtDBPort)
                                    .addComponent(txtDBUser)
                                    .addComponent(txtDBPass)))))
                    .addGroup(JPDBImportLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDBTest)))
                .addGap(18, 18, 18)
                .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDBQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDBQuery)
                    .addComponent(lblDBTestResult, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindDBPath, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(611, 611, 611))
        );
        JPDBImportLayout.setVerticalGroup(
            JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPDBImportLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDBType)
                        .addComponent(cbDBType, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnFindDBPath, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDBQuery)
                .addGap(5, 5, 5)
                .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JPDBImportLayout.createSequentialGroup()
                        .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDBName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDBName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDBIP, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDBIP, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDBPort, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDBPort, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDBUser, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDBUser, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDBPass, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDBPass, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtDBQuery))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPDBImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDBTest, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDBTestResult, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPImportacion.add(JPDBImport, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 660, 320));

        txtRutaImportarNovedades.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtRutaImportarNovedades.setText(bundle.getString("ShowConfigs.txtRutaImportarNovedades.text")); // NOI18N
        txtRutaImportarNovedades.setPreferredSize(new java.awt.Dimension(120, 48));

        btnFindPathPartial.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnFindPathPartial.setText(bundle.getString("ShowConfigs.btnFindPathPartial.text")); // NOI18N
        btnFindPathPartial.setPreferredSize(new java.awt.Dimension(120, 48));
        btnFindPathPartial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPathPartialActionPerformed(evt);
            }
        });

        btnFindPathFull.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnFindPathFull.setText(bundle.getString("ShowConfigs.btnFindPathFull.text")); // NOI18N
        btnFindPathFull.setPreferredSize(new java.awt.Dimension(120, 48));
        btnFindPathFull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPathFullActionPerformed(evt);
            }
        });

        txtRutaImportar.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtRutaImportar.setText(bundle.getString("ShowConfigs.txtRutaImportar.text")); // NOI18N
        txtRutaImportar.setPreferredSize(new java.awt.Dimension(120, 48));

        lblRutaImportar.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblRutaImportar.setText(bundle.getString("ShowConfigs.lblRutaImportar.text")); // NOI18N
        lblRutaImportar.setPreferredSize(new java.awt.Dimension(120, 48));

        lblSeparador.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblSeparador.setText(bundle.getString("ShowConfigs.lblSeparador.text")); // NOI18N
        lblSeparador.setName("lblSeparador"); // NOI18N
        lblSeparador.setPreferredSize(new java.awt.Dimension(120, 48));

        lblRutaImportarNovedades.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblRutaImportarNovedades.setText(bundle.getString("ShowConfigs.lblRutaImportarNovedades.text")); // NOI18N
        lblRutaImportarNovedades.setPreferredSize(new java.awt.Dimension(120, 48));

        txtSeparador.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtSeparador.setText(bundle.getString("ShowConfigs.txtSeparador.text")); // NOI18N
        txtSeparador.setPreferredSize(new java.awt.Dimension(120, 48));

        txtRutaImportarRangos.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtRutaImportarRangos.setText(bundle.getString("ShowConfigs.txtRutaImportarRangos.text")); // NOI18N
        txtRutaImportarRangos.setPreferredSize(new java.awt.Dimension(120, 48));

        lblRutaImportarRangos.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblRutaImportarRangos.setText(bundle.getString("ShowConfigs.lblRutaImportarRangos.text")); // NOI18N
        lblRutaImportarRangos.setPreferredSize(new java.awt.Dimension(120, 48));

        btnFindPathRange.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnFindPathRange.setText(bundle.getString("ShowConfigs.btnFindPathRange.text")); // NOI18N
        btnFindPathRange.setPreferredSize(new java.awt.Dimension(120, 48));
        btnFindPathRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPathRangeActionPerformed(evt);
            }
        });

        chkDeleteFileInput.setText(bundle.getString("ShowConfigs.chkDeleteFileInput.text")); // NOI18N
        chkDeleteFileInput.setActionCommand(bundle.getString("ShowConfigs.chkDeleteFileInput.actionCommand")); // NOI18N
        chkDeleteFileInput.setDoubleBuffered(true);

        btnFindPathlabels.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnFindPathlabels.setText(bundle.getString("ShowConfigs.btnFindPathlabels.text")); // NOI18N
        btnFindPathlabels.setPreferredSize(new java.awt.Dimension(120, 48));
        btnFindPathlabels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPathlabelsActionPerformed(evt);
            }
        });

        txtRutalabels.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtRutalabels.setText(bundle.getString("ShowConfigs.txtRutalabels.text")); // NOI18N
        txtRutalabels.setPreferredSize(new java.awt.Dimension(120, 48));

        lblRutalabels.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblRutalabels.setText(bundle.getString("ShowConfigs.lblRutalabels.text")); // NOI18N
        lblRutalabels.setPreferredSize(new java.awt.Dimension(120, 48));

        javax.swing.GroupLayout JPFileImportLayout = new javax.swing.GroupLayout(JPFileImport);
        JPFileImport.setLayout(JPFileImportLayout);
        JPFileImportLayout.setHorizontalGroup(
            JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPFileImportLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRutaImportar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPFileImportLayout.createSequentialGroup()
                        .addComponent(txtRutaImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnFindPathFull, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(444, 444, 444))
            .addGroup(JPFileImportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblRutaImportarNovedades, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPFileImportLayout.createSequentialGroup()
                            .addComponent(txtRutaImportarNovedades, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(btnFindPathPartial, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(chkDeleteFileInput, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblRutaImportarRangos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPFileImportLayout.createSequentialGroup()
                            .addComponent(txtRutaImportarRangos, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(btnFindPathRange, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(JPFileImportLayout.createSequentialGroup()
                        .addComponent(lblSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblRutalabels, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPFileImportLayout.createSequentialGroup()
                            .addComponent(txtRutalabels, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(btnFindPathlabels, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        JPFileImportLayout.setVerticalGroup(
            JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPFileImportLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lblRutaImportar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRutaImportar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindPathFull, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblRutalabels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRutalabels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindPathlabels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(lblRutaImportarNovedades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRutaImportarNovedades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindPathPartial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(lblRutaImportarRangos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRutaImportarRangos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindPathRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkDeleteFileInput, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPFileImportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPImportacion.add(JPFileImport, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 440, 430));

        chkDeleteFileInputERPtoMGV.setText(bundle.getString("ShowConfigs.chkDeleteFileInputERPtoMGV.text")); // NOI18N
        chkDeleteFileInputERPtoMGV.setActionCommand(bundle.getString("ShowConfigs.chkDeleteFileInputERPtoMGV.actionCommand")); // NOI18N
        chkDeleteFileInputERPtoMGV.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkDeleteFileInputERPtoMGVItemStateChanged(evt);
            }
        });

        lblRutaImportar1.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lblRutaImportar1.setText(bundle.getString("ShowConfigs.lblRutaImportar1.text")); // NOI18N
        lblRutaImportar1.setPreferredSize(new java.awt.Dimension(120, 48));

        txtItensMGVRutaImportar.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        txtItensMGVRutaImportar.setText(bundle.getString("ShowConfigs.txtItensMGVRutaImportar.text")); // NOI18N
        txtItensMGVRutaImportar.setPreferredSize(new java.awt.Dimension(120, 48));

        btnItensMGVFindPathFull.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnItensMGVFindPathFull.setText(bundle.getString("ShowConfigs.btnItensMGVFindPathFull.text")); // NOI18N
        btnItensMGVFindPathFull.setPreferredSize(new java.awt.Dimension(120, 48));
        btnItensMGVFindPathFull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItensMGVFindPathFullActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPItensERPtoMGVLayout = new javax.swing.GroupLayout(JPItensERPtoMGV);
        JPItensERPtoMGV.setLayout(JPItensERPtoMGVLayout);
        JPItensERPtoMGVLayout.setHorizontalGroup(
            JPItensERPtoMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPItensERPtoMGVLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPItensERPtoMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPItensERPtoMGVLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(JPItensERPtoMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(JPItensERPtoMGVLayout.createSequentialGroup()
                                .addComponent(lblRutaImportar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap(248, Short.MAX_VALUE))
                            .addGroup(JPItensERPtoMGVLayout.createSequentialGroup()
                                .addComponent(txtItensMGVRutaImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnItensMGVFindPathFull, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(JPItensERPtoMGVLayout.createSequentialGroup()
                        .addComponent(chkDeleteFileInputERPtoMGV, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(42, Short.MAX_VALUE))))
        );
        JPItensERPtoMGVLayout.setVerticalGroup(
            JPItensERPtoMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPItensERPtoMGVLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRutaImportar1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPItensERPtoMGVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtItensMGVRutaImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnItensMGVFindPathFull, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addGap(273, 273, 273)
                .addComponent(chkDeleteFileInputERPtoMGV)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        jPImportacion.add(JPItensERPtoMGV, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 440, 430));

        cbx_file_format1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbx_file_format1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbx_file_format1ItemStateChanged(evt);
            }
        });
        cbx_file_format1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_file_format1ActionPerformed(evt);
            }
        });
        jPImportacion.add(cbx_file_format1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 196, 40));

        lblDBType1.setText(bundle.getString("ShowConfigs.lblDBType1.text")); // NOI18N
        lblDBType1.setEnabled(false);

        cbDBType1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbDBType1.setEnabled(false);

        lblDBName1.setText(bundle.getString("ShowConfigs.lblDBName1.text")); // NOI18N

        txtDBName1.setText(bundle.getString("ShowConfigs.txtDBName1.text")); // NOI18N
        txtDBName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDBName1ActionPerformed(evt);
            }
        });

        lblDBIP1.setText(bundle.getString("ShowConfigs.lblDBIP1.text")); // NOI18N
        lblDBIP1.setEnabled(false);

        txtDBIP1.setText(bundle.getString("ShowConfigs.txtDBIP1.text")); // NOI18N
        txtDBIP1.setEnabled(false);

        lblDBPort1.setText(bundle.getString("ShowConfigs.lblDBPort1.text")); // NOI18N
        lblDBPort1.setEnabled(false);

        txtDBPort1.setText(bundle.getString("ShowConfigs.txtDBPort1.text")); // NOI18N
        txtDBPort1.setEnabled(false);

        lblDBUser1.setText(bundle.getString("ShowConfigs.lblDBUser1.text")); // NOI18N
        lblDBUser1.setEnabled(false);

        txtDBUser1.setText(bundle.getString("ShowConfigs.txtDBUser1.text")); // NOI18N
        txtDBUser1.setEnabled(false);

        lblDBPass1.setText(bundle.getString("ShowConfigs.lblDBPass1.text")); // NOI18N
        lblDBPass1.setEnabled(false);

        txtDBPass1.setText(bundle.getString("ShowConfigs.txtDBPass1.text")); // NOI18N
        txtDBPass1.setEnabled(false);

        txtDBQuery1.setText(bundle.getString("ShowConfigs.txtDBQuery1.text")); // NOI18N
        txtDBQuery1.setAlignmentX(0.0F);
        txtDBQuery1.setAlignmentY(0.0F);
        txtDBQuery1.setAutoscrolls(false);
        txtDBQuery1.setEnabled(false);

        lblDBQuery1.setText(bundle.getString("ShowConfigs.lblDBQuery1.text")); // NOI18N
        lblDBQuery1.setEnabled(false);

        btnDBTest1.setText(bundle.getString("ShowConfigs.btnDBTest1.text")); // NOI18N
        btnDBTest1.setEnabled(false);
        btnDBTest1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDBTest1ActionPerformed(evt);
            }
        });

        lblDBTestResult1.setText(bundle.getString("ShowConfigs.lblDBTestResult1.text")); // NOI18N
        lblDBTestResult1.setEnabled(false);

        btnDBPath.setText(bundle.getString("ShowConfigs.btnDBPath.text")); // NOI18N
        btnDBPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDBPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPDBImportEleventasLayout = new javax.swing.GroupLayout(JPDBImportEleventas);
        JPDBImportEleventas.setLayout(JPDBImportEleventasLayout);
        JPDBImportEleventasLayout.setHorizontalGroup(
            JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPDBImportEleventasLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPDBImportEleventasLayout.createSequentialGroup()
                        .addComponent(lblDBType1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbDBType1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPDBImportEleventasLayout.createSequentialGroup()
                        .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblDBPass1, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(lblDBUser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDBPort1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDBIP1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDBName1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDBName1)
                            .addComponent(txtDBIP1)
                            .addComponent(txtDBPort1)
                            .addComponent(txtDBUser1)
                            .addComponent(txtDBPass1))))
                .addGap(18, 18, 18)
                .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDBQuery1)
                    .addGroup(JPDBImportEleventasLayout.createSequentialGroup()
                        .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDBTest1)
                            .addComponent(txtDBQuery1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDBTestResult1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnDBPath, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(498, 498, 498))
        );
        JPDBImportEleventasLayout.setVerticalGroup(
            JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPDBImportEleventasLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDBType1)
                    .addComponent(cbDBType1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPDBImportEleventasLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDBName1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDBName1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDBPath, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(JPDBImportEleventasLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDBIP1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDBIP1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDBPort1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDBPort1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDBQuery1))
                                .addGap(18, 18, 18)
                                .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDBUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDBUser1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(JPDBImportEleventasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDBPass1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDBPass1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDBTest1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPDBImportEleventasLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtDBQuery1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(JPDBImportEleventasLayout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(lblDBTestResult1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        jPImportacion.add(JPDBImportEleventas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 660, 320));

        jTabbedPane1.addTab(bundle.getString("ShowConfigs.jPImportacion.TabConstraints.tabTitle"), jPImportacion); // NOI18N

        lblPeriod.setText(bundle.getString("ShowConfigs.lblPeriod.text")); // NOI18N

        cbxPeriod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Por minuto", "Por día", " " }));
        cbxPeriod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxPeriodItemStateChanged(evt);
            }
        });
        cbxPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPeriodActionPerformed(evt);
            }
        });
        cbxPeriod.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                cbxPeriodPropertyChange(evt);
            }
        });

        lblTimeValue.setText(bundle.getString("ShowConfigs.lblTimeValue.text")); // NOI18N

        txtTimeValue.setText(bundle.getString("ShowConfigs.txtTimeValue.text")); // NOI18N
        txtTimeValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimeValueActionPerformed(evt);
            }
        });

        cbxTempHours.setEditable(true);

        btnAddHour.setText(bundle.getString("ShowConfigs.btnAddHour.text")); // NOI18N
        btnAddHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddHourActionPerformed(evt);
            }
        });

        btnDelHour.setText(bundle.getString("ShowConfigs.btnDelHour.text")); // NOI18N
        btnDelHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelHourActionPerformed(evt);
            }
        });

        lblTimeValue1.setText(bundle.getString("ShowConfigs.lblHoras.text")); // NOI18N
        lblTimeValue1.setName("lblHoras"); // NOI18N

        javax.swing.GroupLayout jPTemporizadorLayout = new javax.swing.GroupLayout(jPTemporizador);
        jPTemporizador.setLayout(jPTemporizadorLayout);
        jPTemporizadorLayout.setHorizontalGroup(
            jPTemporizadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTemporizadorLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPTemporizadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPTemporizadorLayout.createSequentialGroup()
                        .addComponent(lblTimeValue)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPTemporizadorLayout.createSequentialGroup()
                        .addGroup(jPTemporizadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPTemporizadorLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblPeriod)
                                .addGap(94, 94, 94))
                            .addGroup(jPTemporizadorLayout.createSequentialGroup()
                                .addGroup(jPTemporizadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTimeValue1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbxTempHours, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPTemporizadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPTemporizadorLayout.createSequentialGroup()
                                .addComponent(btnAddHour, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelHour, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtTimeValue)
                            .addComponent(cbxPeriod, 0, 192, Short.MAX_VALUE))
                        .addContainerGap(305, Short.MAX_VALUE))))
        );
        jPTemporizadorLayout.setVerticalGroup(
            jPTemporizadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTemporizadorLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPTemporizadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPeriod)
                    .addComponent(cbxPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPTemporizadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimeValue, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTimeValue1))
                .addGap(45, 45, 45)
                .addComponent(lblTimeValue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPTemporizadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelHour, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddHour, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxTempHours, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(408, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(bundle.getString("ShowConfigs.jPTemporizador.TabConstraints.tabTitle"), jPTemporizador); // NOI18N

        jPMensajes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rbMostrarMensajes.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        rbMostrarMensajes.setText(bundle.getString("ShowConfigs.rbMostrarMensajes.text")); // NOI18N
        rbMostrarMensajes.setPreferredSize(new java.awt.Dimension(133, 48));
        jPMensajes.add(rbMostrarMensajes, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, 210, -1));

        cbxSendMail.setText(bundle.getString("ShowConfigs.cbxSendMail.text")); // NOI18N
        cbxSendMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSendMailActionPerformed(evt);
            }
        });
        jPMensajes.add(cbxSendMail, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        lblMailAddress.setText(bundle.getString("ShowConfigs.lblMailAddress.text")); // NOI18N
        jPMensajes.add(lblMailAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        txtMailAddress.setText(bundle.getString("ShowConfigs.txtMailAddress.text")); // NOI18N
        jPMensajes.add(txtMailAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 59, 350, 30));

        lblMailPass.setText(bundle.getString("ShowConfigs.lblMailPass.text")); // NOI18N
        jPMensajes.add(lblMailPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

        txtMailPass.setText(bundle.getString("ShowConfigs.txtMailPass.text")); // NOI18N
        jPMensajes.add(txtMailPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 350, 30));

        lblMailDestiny.setText(bundle.getString("ShowConfigs.lblMailDestiny.text")); // NOI18N
        jPMensajes.add(lblMailDestiny, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, -1, -1));

        cbxMailDestiny.setEditable(true);
        jPMensajes.add(cbxMailDestiny, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 350, 40));

        btnMailDestAdd.setText(bundle.getString("ShowConfigs.btnMailDestAdd.text")); // NOI18N
        btnMailDestAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMailDestAddActionPerformed(evt);
            }
        });
        jPMensajes.add(btnMailDestAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 300, 100, 40));

        btnMailDestDel.setText(bundle.getString("ShowConfigs.btnMailDestDel.text")); // NOI18N
        btnMailDestDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMailDestDelActionPerformed(evt);
            }
        });
        jPMensajes.add(btnMailDestDel, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 300, 100, 40));

        lblMailHost.setText(bundle.getString("ShowConfigs.lblMailHost.text")); // NOI18N
        jPMensajes.add(lblMailHost, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        lblMailPort.setText(bundle.getString("ShowConfigs.lblMailPort.text")); // NOI18N
        jPMensajes.add(lblMailPort, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        txtMailHost.setText(bundle.getString("ShowConfigs.txtMailHost.text")); // NOI18N
        jPMensajes.add(txtMailHost, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, 350, 30));

        txtMailPort.setText(bundle.getString("ShowConfigs.txtMailPort.text")); // NOI18N
        jPMensajes.add(txtMailPort, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, 350, 30));

        btnTestEmail.setText(bundle.getString("ShowConfigs.btnTestEmail.text")); // NOI18N
        btnTestEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestEmailActionPerformed(evt);
            }
        });
        jPMensajes.add(btnTestEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, -1, -1));

        lblTestMailResult.setText(bundle.getString("ShowConfigs.lblTestMailResult.text")); // NOI18N
        jPMensajes.add(lblTestMailResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 350, 380, 30));

        jTabbedPane1.addTab(bundle.getString("ShowConfigs.jPMensajes.TabConstraints.tabTitle"), jPMensajes); // NOI18N

        jPSeguridad.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSegPass.setText(bundle.getString("ShowConfigs.lblSegPass.text")); // NOI18N
        jPSeguridad.add(lblSegPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 120, 30));

        txtSegPass.setText(bundle.getString("ShowConfigs.txtSegPass.text")); // NOI18N
        jPSeguridad.add(txtSegPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 270, 30));

        cbxAllowSecurity.setText(bundle.getString("ShowConfigs.cbxAllowSecurity.text")); // NOI18N
        jPSeguridad.add(cbxAllowSecurity, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        jTabbedPane1.addTab(bundle.getString("ShowConfigs.jPSeguridad.TabConstraints.tabTitle"), jPSeguridad); // NOI18N

        jPQendra.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbxActivateQendra.setText(bundle.getString("ShowConfigs.cbxActivateQendra.text")); // NOI18N
        cbxActivateQendra.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cbxActivateQendraStateChanged(evt);
            }
        });
        jPQendra.add(cbxActivateQendra, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 250, 50));

        cbxQendraDefaultPath.setText(bundle.getString("ShowConfigs.cbxQendraDefaultPath.text")); // NOI18N
        cbxQendraDefaultPath.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cbxQendraDefaultPathStateChanged(evt);
            }
        });
        jPQendra.add(cbxQendraDefaultPath, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 250, 40));

        txtQendraPath.setText(bundle.getString("ShowConfigs.txtQendraPath.text")); // NOI18N
        jPQendra.add(txtQendraPath, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 340, 50));

        btnFindQendraPath.setText(bundle.getString("ShowConfigs.btnFindQendraPath.text")); // NOI18N
        btnFindQendraPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindQendraPathActionPerformed(evt);
            }
        });
        jPQendra.add(btnFindQendraPath, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 170, 110, 50));

        jTabbedPane1.addTab(bundle.getString("ShowConfigs.jPQendra.TabConstraints.tabTitle"), jPQendra); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        btnSave.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnSave.setText(bundle.getString("ShowConfigs.btnSave.text")); // NOI18N
        btnSave.setMaximumSize(new java.awt.Dimension(120, 48));
        btnSave.setMinimumSize(new java.awt.Dimension(120, 48));
        btnSave.setPreferredSize(new java.awt.Dimension(120, 48));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 450, 16, 0);
        getContentPane().add(btnSave, gridBagConstraints);

        btnCancel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnCancel.setText(bundle.getString("ShowConfigs.btnCancel.text")); // NOI18N
        btnCancel.setMaximumSize(new java.awt.Dimension(120, 48));
        btnCancel.setMinimumSize(new java.awt.Dimension(120, 48));
        btnCancel.setPreferredSize(new java.awt.Dimension(120, 48));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 16, 10);
        getContentPane().add(btnCancel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddingIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddingIpActionPerformed
        if (cbIps.getSelectedItem().toString().equals("")) {
            return;
        }
        boolean item_exist = false;
        for (int i = 0; i < cbIps.getItemCount(); i++) {
            if (cbIps.getItemAt(i).equals(cbIps.getSelectedItem().toString())) {
                item_exist = true;
                break;
            }
        }
        if (!item_exist) {
            cbIps.addItem(cbIps.getSelectedItem().toString());
        }
    }//GEN-LAST:event_btnAddingIpActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        ConfigFile.setLogPath(txtRutaLog.getText().trim());
        ConfigFile.setPsqlPath(txtRutaPsql.getText().trim());
        ConfigFile.setSeparator(txtSeparador.getText().trim());

        ConfigFile.setFilePathRangos(txtRutaImportarRangos.getText().trim(), false);
        ConfigFile.setFilePath(txtRutaImportar.getText().trim(), false);
        ConfigFile.setFileLabelsPath(txtRutalabels.getText().trim(), false);
        ConfigFile.setFilePathNovedades(txtRutaImportarNovedades.getText().trim(), false);
        ConfigFile.setItensMGVNutInfoFilePath(txtItensMGVRutaNutInfo.getText().trim(), false);
        ConfigFile.setItensMGVReceingFilePath(txtItensMGVRutaRecetas.getText().trim(), false);
        ConfigFile.setItensMGVTaraFilePath(txtItensMGVRutaTara.getText().trim(), false);
        ConfigFile.setItensMGVConservacionFilePath(txtItensMGVRutaConservacion.getText().trim(), false);
        ConfigFile.setItensMGVExtra2FilePath(txtItensMGVRutaExtra2.getText().trim(), false);
        ConfigFile.setItensMGVIngredientsFilePath(txtItensMGVRutaIngredients.getText().trim(), false);
        ConfigFile.setItensMGVIngredientsFilePath2(txtItensMGVRutaIngredients1.getText().trim(), false);

        ConfigFile.setFilePathRangos(txtRutaImportarRangos.getText().trim(), txtRutaImportarRangos.isVisible());

        ConfigFile.setShowmessage(rbMostrarMensajes.isSelected() ? "1" : "0");
        ConfigFile.setImportmanual(rbAutoDiscoverScale.isSelected() ? "1" : "0");

        ConfigFile.setFiletype("" + cbx_file_format.getSelectedIndex());
        switch (ConfigFile.FileType.fromInteger(cbx_file_format.getSelectedIndex())) {
            case ITENS_MGV:
                ConfigFile.setFilePathNovedades(txtItensMGVRutaImportarNovedades.getText().trim(), txtItensMGVRutaImportarNovedades.isVisible());
                ConfigFile.setDeleteFileInput(chkDeleteFileInputMGV.isSelected() ? "1" : "0");
                chkDeleteFileInputMGV.setVisible(true);
                break;

            case ITENS_MGV_DEPTO:
                Connection conLocalhost = null;
                try {
                    conLocalhost = getCon("localhost");
                    if (conLocalhost != null) {
                        conLocalhost.close();
                        UpToDate.getInstance("127.0.0.1", ConfigProperties.ConfigFile.getPsqlPath(), MainApp.pwd);
                    } else {
                        customLogger.writeLog(MainApp.ERROR, "127.0.0.1", " UpToDate - NO SE PUEDE CONECTAR CON EL DISPOSITIVO");
                        System.out.println("");
                        System.out.println("127.0.0.1" + " UpToDate - NO SE PUEDE CONECTAR CON EL DISPOSITIVO");
                        System.out.println("");
                    }

                } catch (Exception ex) {
                    Logger.getLogger(ShowConfigs.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    conLocalhost = null;
                }

                ConfigFile.setFilePathNovedades(txtItensMGVRutaImportarNovedades.getText().trim(), txtItensMGVRutaImportarNovedades.isVisible());
                ConfigFile.setDeleteFileInput("0");
                chkDeleteFileInputMGV.setSelected(false);
                chkDeleteFileInputMGV.setVisible(false);
                break;
            case ITENS_ERPtoMGV:
                ConfigFile.setFilePath(txtItensMGVRutaImportar.getText().trim(), txtItensMGVRutaImportar.isVisible());
                ConfigFile.setDeleteFileInput(chkDeleteFileInputERPtoMGV.isSelected() ? "1" : "0");
                break;
            default:
                ConfigFile.setFilePath(txtRutaImportar.getText().trim(), txtRutaImportar.isVisible());
                ConfigFile.setFileLabelsPath(txtRutalabels.getText().trim(), txtRutalabels.isVisible());
                ConfigFile.setFilePathNovedades(txtRutaImportarNovedades.getText().trim(), txtRutaImportarNovedades.isVisible());
                ConfigFile.setDeleteFileInput(chkDeleteFileInput.isSelected() ? "1" : "0");
                break;
        }

        /*if (rbSystelFormatFile.isSelected()) {
            ConfigFile.setFiletype("0");
        } else if (rbFiresFormatFile.isSelected()) {
            ConfigFile.setFiletype("1");
        } else if (rbIntellibuildFormatFile.isSelected()) {
            ConfigFile.setFiletype("2");
        }
//        else if (rbSDRFormatFile.isSelected())
//            ConfigFile.setFiletype("3");
//
         */
        String ips = "";
        for (int i = 0; i < cbIps.getItemCount(); i++) {
            ips = ips + cbIps.getItemAt(i);
            if (i < cbIps.getItemCount() - 1) {
                if (ips.trim().length() > 0) {
                    ips = ips.trim() + ";";
                }
            }
        }
        ConfigFile.setIpv4(ips);
        String loc = "";
        for (Locale supportedLocale : supportedLocales) {
            loc = supportedLocale.getLanguage() + "_" + supportedLocale.getCountry();

            if (loc.equalsIgnoreCase(((ComboItem) cbLang.getSelectedItem()).getValue())) {
                ConfigFile.setLocaleLang(loc);
                break;
            }
        }

        /* Solapa Importacion -> Data Base */
        ConfigFile.setImportDBType(Integer.toString(cbDBType.getSelectedIndex()));
        ConfigFile.setImportDBIP(txtDBIP.getText().trim());
        ConfigFile.setImportDBName(txtDBName.getText().trim());
        ConfigFile.setImportDBPort(txtDBPort.getText().trim());
        ConfigFile.setImportDBUser(txtDBUser.getText().trim());
        ConfigFile.setImportDBPass(txtDBPass.getText().trim());
        ConfigFile.setImportDBQuery(txtDBQuery.getText().trim());

        /* Solapa Importacion -> ItensMGV */
        ConfigFile.setItensMGVNutInfoFilePath(txtItensMGVRutaNutInfo.getText().trim(), txtItensMGVRutaNutInfo.isVisible());
        ConfigFile.setItensMGVReceingFilePath(txtItensMGVRutaRecetas.getText().trim(), txtItensMGVRutaRecetas.isVisible());
        ConfigFile.setItensMGVTaraFilePath(txtItensMGVRutaTara.getText().trim(), txtItensMGVRutaTara.isVisible());
        ConfigFile.setItensMGVConservacionFilePath(txtItensMGVRutaConservacion.getText().trim(), txtItensMGVRutaConservacion.isVisible());

        ConfigFile.setItensMGVExtra2FilePath(txtItensMGVRutaExtra2.getText().trim(), txtItensMGVRutaExtra2.isVisible());
        ConfigFile.setItensMGVIngredientsFilePath(txtItensMGVRutaIngredients.getText().trim(), txtItensMGVRutaIngredients.isVisible());
        ConfigFile.setItensMGVIngredientsFilePath2(txtItensMGVRutaIngredients1.getText().trim(), txtItensMGVRutaIngredients1.isVisible());

        /* Solapa de Mensajes */
        ConfigFile.setSendEmail(cbxSendMail.isSelected());
        ConfigFile.setEmailUser(txtMailAddress.getText());
        ConfigFile.setEmailPass(txtMailPass.getText());
        ConfigFile.setEmailHost(txtMailHost.getText());
        ConfigFile.setEmailPort(txtMailPort.getText());
        String emailDest = "";
        for (int i = 0; i < cbxMailDestiny.getItemCount(); i++) {
            emailDest = emailDest + cbxMailDestiny.getItemAt(i);
            if (i <= cbxMailDestiny.getItemCount() - 1) {
                if (emailDest.trim().length() > 0) {
                    emailDest = emailDest.trim() + ";";
                }
            }
        }
        ConfigFile.setEmailDestinatary(emailDest.split("\\;"));

        /* Solapa Temporizador */
        ConfigFile.setSchedulerPeriod(Integer.toString(cbxPeriod.getSelectedIndex()));
        ConfigFile.setSchedulerTimeValue(txtTimeValue.getText().trim());
        String hours = "";
        for (int i = 0; i < cbxTempHours.getItemCount(); i++) {
            if (!cbxTempHours.getItemAt(i).equals("")) {
                hours = hours + cbxTempHours.getItemAt(i);
                if (i < cbxTempHours.getItemCount() - 1) {
                    if (hours.trim().length() > 0) {
                        hours = hours.trim() + ";";
                    }
                }
            }
        }
        if (cbxTempHours.getItemCount() > 0) {
            ConfigFile.setSchedulerHours(hours.split("\\;"));
        }

        /* Solapa Qendra */
        ConfigFile.setQendraIsActive(cbxActivateQendra.isSelected());
        ConfigFile.setUseQendraDefPath(cbxQendraDefaultPath.isSelected());
        ConfigFile.setQendraPath(txtQendraPath.getText());

        //ELEVENTAS
        ConfigFile.setEleventasPath(txtDBName1.getText().trim());

        try {
            configs.setPropValues();
//            configs.getPropValues();

        } catch (IOException ex) {
            Logger.getLogger(ShowConfigs.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (ConfigFile.FileType.fromInteger(cbx_file_format.getSelectedIndex()) == ConfigFile.FileType.ITENS_MGV_DEPTO) {
            if (!txtItensMGVRutaImportarNovedades.getText().trim().isEmpty()) {
                MainApp.chooseDev.lstDeptos = FileLoader.parseInputMGVDepto(txtItensMGVRutaImportarNovedades.getText().trim());
            }
        }

        LocaleUtil.removeLocaleChangeListener(this);
        this.dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteIpActionPerformed
        cbIps.removeItemAt(cbIps.getSelectedIndex());
    }//GEN-LAST:event_btnDeleteIpActionPerformed

    private void btnFindLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindLogActionPerformed
        final JFileChooser c = new JFileChooser();

        c.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        c.setAcceptAllFileFilterUsed(false);
        setFileChooserFont(c.getComponents());
//

        Component aComponent = null;
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtRutaLog.setText(c.getSelectedFile().getAbsolutePath().trim() + "/");
        }

    }//GEN-LAST:event_btnFindLogActionPerformed

    Font font = new Font("monospaced", Font.ITALIC, 12);

    public void setFileChooserFont(Component[] comp) {
        for (int x = 0; x < comp.length; x++) {
            if (comp[x] instanceof Container) {
                setFileChooserFont(((Container) comp[x]).getComponents());
            }
            try {
                comp[x].setFont(font);
            } catch (Exception e) {
            }//do nothing
        }
    }

    private void rbAutoDiscoverScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAutoDiscoverScaleActionPerformed
        cbIps.setEnabled(!rbAutoDiscoverScale.isSelected());
        btnAddingIp.setEnabled(!rbAutoDiscoverScale.isSelected());
        btnDeleteIp.setEnabled(!rbAutoDiscoverScale.isSelected());
    }//GEN-LAST:event_rbAutoDiscoverScaleActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        LocaleUtil.removeLocaleChangeListener(this);
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnFindPathFullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPathFullActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtRutaImportar.setText(c.getSelectedFile().getPath());

        }    }//GEN-LAST:event_btnFindPathFullActionPerformed

    private void btnFindPathPartialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPathPartialActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtRutaImportarNovedades.setText(c.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnFindPathPartialActionPerformed

    private void cbLangItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbLangItemStateChanged
        if (!bIsLoadCbo) {
            LocaleUtil.setCurrentLocaleByIndex(cbLang.getSelectedIndex());
        }
    }//GEN-LAST:event_cbLangItemStateChanged

    private void txtTimeValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimeValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeValueActionPerformed

    private void cbxPeriodPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_cbxPeriodPropertyChange
        // Acá tendrá que actualizar los labels para que se muestren correctamente.
        switch (cbxPeriod.getSelectedIndex()) {
            case 0:
                // Por minuto
                lblTimeValue.setText(LocaleUtil.getMessage("Hora determinada:"));
                break;
            default:
                lblTimeValue.setText(LocaleUtil.getMessage("Hora determinada:"));
                break;
        }


    }//GEN-LAST:event_cbxPeriodPropertyChange

    private void cbxPeriodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxPeriodItemStateChanged
        TempViewRefresh();
    }//GEN-LAST:event_cbxPeriodItemStateChanged

    private void cbxSendMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSendMailActionPerformed
        // TODO add your handling code here:
        EmailViewRefresh();
    }//GEN-LAST:event_cbxSendMailActionPerformed

    private void btnMailDestAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMailDestAddActionPerformed
        if (cbxMailDestiny.getSelectedItem().toString().equals("")) {
            return;
        }
        boolean item_exist = false;
        for (int i = 0; i < cbxMailDestiny.getItemCount(); i++) {
            if (cbxMailDestiny.getItemAt(i).equals(cbxMailDestiny.getSelectedItem().toString())) {
                item_exist = true;
                break;
            }
        }
        if (!item_exist) {
            cbxMailDestiny.addItem(cbxMailDestiny.getSelectedItem().toString());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnMailDestAddActionPerformed

    private void btnMailDestDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMailDestDelActionPerformed
        cbxMailDestiny.removeItemAt(cbxMailDestiny.getSelectedIndex());
    }//GEN-LAST:event_btnMailDestDelActionPerformed

    private void btnAddHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddHourActionPerformed
        if (cbxTempHours.getEditor().getItem().toString().trim().equals("")) {
            return;
        }
        boolean item_exist = false;
        for (int i = 0; i < cbxTempHours.getItemCount(); i++) {
            if (cbxTempHours.getItemAt(i).equals(cbxTempHours.getEditor().getItem().toString().trim())) {
                item_exist = true;
                break;
            }
        }

        if (!item_exist) {
            cbxTempHours.addItem(cbxTempHours.getEditor().getItem().toString().trim());
        }

//        int itemsCount = cbxTempHours.getItemCount();
//
//        for (int i = 0; i < itemsCount; i++) {
//            if (cbxTempHours.getItemAt(i).equals("")) {
//                cbxTempHours.removeItemAt(cbxTempHours.getSelectedIndex());
//            }
//        }
        cbxTempHours.setEditor(new MyComboBoxEditor());

        RefreshTimerProps();

    }//GEN-LAST:event_btnAddHourActionPerformed

    private void btnDelHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelHourActionPerformed
        if (cbxTempHours.getSelectedIndex() >= 0) {
            int idx = cbxTempHours.getSelectedIndex();
            cbxTempHours.removeItemAt(idx);
            cbxTempHours.setEditor(new MyComboBoxEditor());

//        if (cbxTempHours.getSelectedIndex() < 0 || cbxTempHours.getSelectedIndex() >= ConfigFile.getSchedulerHours().length) {
//            throw new IllegalArgumentException("Índice fuera de rango");
//        }
            String[] result = new String[ConfigFile.getSchedulerHours().length - 1];
            for (int i = 0, j = 0; i < ConfigFile.getSchedulerHours().length; i++) {
                if (i != idx) {
                    result[j++] = ConfigFile.getSchedulerHours()[i];
                }
            }
            ConfigFile.setSchedulerHours(result);

            RefreshTimerProps();
        }
    }//GEN-LAST:event_btnDelHourActionPerformed

    private void cbxPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPeriodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxPeriodActionPerformed

    private void cbx_file_formatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbx_file_formatItemStateChanged
        // TODO add your handling code here:
        JPDatosImportacionViewRefresh();
    }//GEN-LAST:event_cbx_file_formatItemStateChanged

    private void btnDBTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDBTestActionPerformed
        try {
            String driver_conn_string = "";

            if (Integer.toString(cbDBType.getSelectedIndex()).equals(ConfigProperties.ConfigFile.DBType.FIREBIRD)) {
                driver_conn_string = "jdbc:firebirdsql://" + txtDBIP.getText().trim()
                        + ":" + txtDBPort.getText().trim()
                        + "/" + txtDBName.getText().trim();
                Class.forName("org.firebirdsql.jdbc.FBDriver");
            } else if (Integer.toString(cbDBType.getSelectedIndex()).equals(ConfigProperties.ConfigFile.DBType.POSTGRESQL)) {
                driver_conn_string = "jdbc:postgresql://" + txtDBIP.getText().trim()
                        + ":" + txtDBPort.getText().trim()
                        + "/" + txtDBName.getText().trim();
                Class.forName("org.postgresql.Driver");
            } else if (Integer.toString(cbDBType.getSelectedIndex()).equals(ConfigProperties.ConfigFile.DBType.SQLSERVER)) {
                driver_conn_string = "jdbc:sqlserver://" + txtDBIP.getText().trim()
                        + ":" + txtDBPort.getText().trim()
                        + ";databaseName=" + txtDBName.getText().trim()
                        + ";encrypt=true;trustServerCertificate=true";
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            } else if (Integer.toString(cbDBType.getSelectedIndex()).equals(ConfigProperties.ConfigFile.DBType.MySQL)) {
                driver_conn_string = "jdbc:mysql://" + txtDBIP.getText().trim()
                        + ":" + txtDBPort.getText().trim()
                        + "/" + txtDBName.getText().trim();
                Class.forName("com.mysql.jdbc.Driver");
            } else if (Integer.toString(cbDBType.getSelectedIndex()).equals(ConfigProperties.ConfigFile.DBType.MARIADB)) {
                driver_conn_string = "jdbc:mariadb://" + txtDBIP.getText().trim()
                        + ":" + txtDBPort.getText().trim()
                        + "/" + txtDBName.getText().trim();
                Class.forName("org.mariadb.jdbc.Driver");
                /*
                    jdbc:mariadb:load-balance-read://127.0.0.5,127.0.0.6,address=(host=127.0.0.7)(type=replica),address=(host=127.0.0.8)(type=replica)/DB
                Equivalent of:
                    jdbc:mariadb:load-balance-read://address=(host=127.0.0.5)(type=primary),address=(host=127.0.0.6)(type=primary),address=(host=127.0.0.7)(type=replica),address=(host=127.0.0.8)(type=replica)/DB
                */
            } else if (Integer.toString(cbDBType.getSelectedIndex()).equals(ConfigProperties.ConfigFile.DBType.SQLITE)) {
                driver_conn_string = "jdbc:firebirdsql://" + txtRutaImportar.getText().trim();
                Class.forName("org.sqlite.jdbc");
            }
            java.sql.Driver driver = java.sql.DriverManager.getDriver(driver_conn_string);

            java.util.Properties connectionProperties = new java.util.Properties();
            connectionProperties.put("user", txtDBUser.getText().trim());
            connectionProperties.put("password", txtDBPass.getText().trim());

            Connection jdbc_conn = driver.connect(driver_conn_string, connectionProperties);
            lblDBTestResult.setText(LocaleUtil.getMessage("Conexión establecida."));
            lblDBTestResult.setForeground(Color.BLUE);
        } catch (Exception e) {
            lblDBTestResult.setText(LocaleUtil.getMessage("Fallo en la conexión: ") + e.toString());
            lblDBTestResult.setForeground(Color.RED);

            //System.out.println(e.toString());
        }
    }//GEN-LAST:event_btnDBTestActionPerformed

    private void btnTestEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestEmailActionPerformed

        btnMailDestAddActionPerformed(evt);

        if (txtMailAddress.getText().trim().isEmpty()
                || txtMailPass.getText().trim().isEmpty()
                || txtMailHost.getText().trim().isEmpty()
                || txtMailPort.getText().trim().isEmpty()
                || cbxMailDestiny.getItemCount() == 0) {

            lblTestMailResult.setText(LocaleUtil.getMessage("Por favor, complete todos los campos"));
            return;
        }
        if (cbxSendMail.isSelected() && cbxMailDestiny.getItemCount() > 0) {
            EMail email = new EMail(txtMailAddress.getText().trim(),// ConfigProperties.ConfigFile.getEmailUser(),
                    txtMailPass.getText().trim(), //ConfigProperties.ConfigFile.getEmailPass(),
                    txtMailHost.getText().trim(), //ConfigProperties.ConfigFile.getEmailHost(),
                    txtMailPort.getText().trim(), //ConfigProperties.ConfigFile.getEmailPort(),
                    "localhost");
            String emailDest = "";

            emailDest = cbxMailDestiny.getItemAt(cbxMailDestiny.getSelectedIndex());

            email.addAddress(emailDest.trim());

            email.sendMail(LocaleUtil.getMessage("Importador Neo, Test Email"));

            lblTestMailResult.setText(LocaleUtil.getMessage("Verifique su casilla de correo"));
        }
    }//GEN-LAST:event_btnTestEmailActionPerformed

    private void btnFindPsqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPsqlActionPerformed
        final JFileChooser c = new JFileChooser();

        c.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //
        // disable the "All files" option.
        //
        c.setAcceptAllFileFilterUsed(false);
        setFileChooserFont(c.getComponents());
//

        Component aComponent = null;
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtRutaPsql.setText(c.getSelectedFile().getAbsolutePath().trim());
        }
    }//GEN-LAST:event_btnFindPsqlActionPerformed

    private void btnFindPathRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPathRangeActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtRutaImportarRangos.setText(c.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnFindPathRangeActionPerformed

    private void btnFindQendraPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindQendraPathActionPerformed
        final JFileChooser c = new JFileChooser();

        c.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //
        // disable the "All files" option.
        //
        c.setAcceptAllFileFilterUsed(false);
        setFileChooserFont(c.getComponents());
//

        Component aComponent = null;
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtQendraPath.setText(c.getSelectedFile().getAbsolutePath().trim());
        }
    }//GEN-LAST:event_btnFindQendraPathActionPerformed

    private void showQendraSubMenu() {
        cbxQendraDefaultPath.setEnabled(cbxActivateQendra.isSelected());
        txtQendraPath.setEnabled(cbxActivateQendra.isSelected() && !cbxQendraDefaultPath.isSelected());
        btnFindQendraPath.setEnabled(cbxActivateQendra.isSelected() && !cbxQendraDefaultPath.isSelected());
    }
    private void cbxActivateQendraStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbxActivateQendraStateChanged
        showQendraSubMenu();
    }//GEN-LAST:event_cbxActivateQendraStateChanged

    private void cbxQendraDefaultPathStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cbxQendraDefaultPathStateChanged
        showQendraSubMenu();
    }//GEN-LAST:event_cbxQendraDefaultPathStateChanged

    private void btnItensMGVFindPathPartialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItensMGVFindPathPartialActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtItensMGVRutaImportarNovedades.setText(c.getSelectedFile().getPath());
        }            // TODO add your handling code here:
    }//GEN-LAST:event_btnItensMGVFindPathPartialActionPerformed

    private void chkDeleteFileInputMGVItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkDeleteFileInputMGVItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_chkDeleteFileInputMGVItemStateChanged

    private void btnItensMGVRutaRecetasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItensMGVRutaRecetasActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtItensMGVRutaRecetas.setText(c.getSelectedFile().getPath());
        }            // TODO add your handling code here:
    }//GEN-LAST:event_btnItensMGVRutaRecetasActionPerformed

    private void btnItensMGVRutaNutInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItensMGVRutaNutInfoActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtItensMGVRutaNutInfo.setText(c.getSelectedFile().getPath());
        }            // TODO add your handling code here:
    }//GEN-LAST:event_btnItensMGVRutaNutInfoActionPerformed

    private void btnItensMGVTaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItensMGVTaraActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtItensMGVRutaTara.setText(c.getSelectedFile().getPath());
        }
    }
            // TODO add you    }//GEN-LAST:event_btnItensMGVTaraActionPerformed

    private void txtDBNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDBNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDBNameActionPerformed

    private void chkDeleteFileInputERPtoMGVItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkDeleteFileInputERPtoMGVItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_chkDeleteFileInputERPtoMGVItemStateChanged

    private void btnItensMGVFindPathFullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItensMGVFindPathFullActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtItensMGVRutaImportar.setText(c.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnItensMGVFindPathFullActionPerformed

    private void cbx_file_format1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbx_file_format1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbx_file_format1ItemStateChanged

    private void cbx_file_format1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_file_format1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbx_file_format1ActionPerformed

    private void btnFindPathlabelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPathlabelsActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtRutalabels.setText(c.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnFindPathlabelsActionPerformed

    private void btnItensMGVConservacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItensMGVConservacionActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtItensMGVRutaConservacion.setText(c.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnItensMGVConservacionActionPerformed

    private void btnItensMGVExtra2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItensMGVExtra2ActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtItensMGVRutaExtra2.setText(c.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnItensMGVExtra2ActionPerformed

    private void btnItensMGVIngredientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItensMGVIngredientsActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtItensMGVRutaIngredients.setText(c.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnItensMGVIngredientsActionPerformed

    private void btnItensMGVIngredients1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItensMGVIngredients1ActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtItensMGVRutaIngredients1.setText(c.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnItensMGVIngredients1ActionPerformed

    private void txtDBName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDBName1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDBName1ActionPerformed

    private void btnDBTest1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDBTest1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDBTest1ActionPerformed

    private void btnDBPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDBPathActionPerformed

    }//GEN-LAST:event_btnDBPathActionPerformed

    private void btnFindDBPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindDBPathActionPerformed
        final JFileChooser c = new JFileChooser();
        Component aComponent = null;
        setFileChooserFont(c.getComponents());
        int returnVal = c.showOpenDialog(aComponent);
        if (returnVal != ERROR) {
            txtDBName.setText(c.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_btnFindDBPathActionPerformed

    private void cbDBTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbDBTypeItemStateChanged

        btnFindDBPath.setEnabled(Integer.toString(cbDBType.getSelectedIndex()).equals(ConfigProperties.ConfigFile.DBType.FIREBIRD));

    }//GEN-LAST:event_cbDBTypeItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPDBImport;
    private javax.swing.JPanel JPDBImportEleventas;
    private javax.swing.JPanel JPFileImport;
    private javax.swing.JPanel JPItensERPtoMGV;
    private javax.swing.JPanel JPItensMGV;
    private javax.swing.JButton btnAddHour;
    private javax.swing.JButton btnAddingIp;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDBPath;
    private javax.swing.JButton btnDBTest;
    private javax.swing.JButton btnDBTest1;
    private javax.swing.JButton btnDelHour;
    private javax.swing.JButton btnDeleteIp;
    private javax.swing.JButton btnFindDBPath;
    private javax.swing.JButton btnFindLog;
    private javax.swing.JButton btnFindPathFull;
    private javax.swing.JButton btnFindPathPartial;
    private javax.swing.JButton btnFindPathRange;
    private javax.swing.JButton btnFindPathlabels;
    private javax.swing.JButton btnFindPsql;
    private javax.swing.JButton btnFindQendraPath;
    private javax.swing.JButton btnItensMGVConservacion;
    private javax.swing.JButton btnItensMGVExtra2;
    private javax.swing.JButton btnItensMGVFindPathFull;
    private javax.swing.JButton btnItensMGVFindPathPartial;
    private javax.swing.JButton btnItensMGVIngredients;
    private javax.swing.JButton btnItensMGVIngredients1;
    private javax.swing.JButton btnItensMGVRutaNutInfo;
    private javax.swing.JButton btnItensMGVRutaRecetas;
    private javax.swing.JButton btnItensMGVTara;
    private javax.swing.JButton btnMailDestAdd;
    private javax.swing.JButton btnMailDestDel;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnTestEmail;
    private javax.swing.JComboBox<String> cbDBType;
    private javax.swing.JComboBox<String> cbDBType1;
    private javax.swing.JComboBox<String> cbIps;
    private javax.swing.JComboBox cbLang;
    private javax.swing.JCheckBox cbxActivateQendra;
    private javax.swing.JCheckBox cbxAllowSecurity;
    private javax.swing.JComboBox<String> cbxMailDestiny;
    private javax.swing.JComboBox<String> cbxPeriod;
    private javax.swing.JCheckBox cbxQendraDefaultPath;
    private javax.swing.JCheckBox cbxSendMail;
    private javax.swing.JComboBox<String> cbxTempHours;
    private javax.swing.JComboBox<String> cbx_file_format;
    private javax.swing.JComboBox<String> cbx_file_format1;
    private javax.swing.JCheckBox chkDeleteFileInput;
    private javax.swing.JCheckBox chkDeleteFileInputERPtoMGV;
    private javax.swing.JCheckBox chkDeleteFileInputMGV;
    private javax.swing.JPanel jPImportacion;
    private javax.swing.JPanel jPMensajes;
    private javax.swing.JPanel jPQendra;
    private javax.swing.JPanel jPSeguridad;
    private javax.swing.JPanel jPTemporizador;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDBIP;
    private javax.swing.JLabel lblDBIP1;
    private javax.swing.JLabel lblDBName;
    private javax.swing.JLabel lblDBName1;
    private javax.swing.JLabel lblDBPass;
    private javax.swing.JLabel lblDBPass1;
    private javax.swing.JLabel lblDBPort;
    private javax.swing.JLabel lblDBPort1;
    private javax.swing.JLabel lblDBQuery;
    private javax.swing.JLabel lblDBQuery1;
    private javax.swing.JLabel lblDBTestResult;
    private javax.swing.JLabel lblDBTestResult1;
    private javax.swing.JLabel lblDBType;
    private javax.swing.JLabel lblDBType1;
    private javax.swing.JLabel lblDBUser;
    private javax.swing.JLabel lblDBUser1;
    private javax.swing.JLabel lblFormatoEntrada;
    private javax.swing.JLabel lblIdioma;
    private javax.swing.JLabel lblIps;
    private javax.swing.JLabel lblItensMGVConservacion;
    private javax.swing.JLabel lblItensMGVExtra2;
    private javax.swing.JLabel lblItensMGVIngredients;
    private javax.swing.JLabel lblItensMGVIngredients1;
    private javax.swing.JLabel lblItensMGVRutaNutInfo;
    private javax.swing.JLabel lblItensMGVRutaRecetas;
    private javax.swing.JLabel lblItensMGVTara;
    private javax.swing.JLabel lblMailAddress;
    private javax.swing.JLabel lblMailDestiny;
    private javax.swing.JLabel lblMailHost;
    private javax.swing.JLabel lblMailPass;
    private javax.swing.JLabel lblMailPort;
    private javax.swing.JLabel lblPeriod;
    private javax.swing.JLabel lblRutaImportar;
    private javax.swing.JLabel lblRutaImportar1;
    private javax.swing.JLabel lblRutaImportarNovedades;
    private javax.swing.JLabel lblRutaImportarNovedades1;
    private javax.swing.JLabel lblRutaImportarRangos;
    private javax.swing.JLabel lblRutaLog;
    private javax.swing.JLabel lblRutaPsql;
    private javax.swing.JLabel lblRutalabels;
    private javax.swing.JLabel lblSegPass;
    private javax.swing.JLabel lblSeparador;
    private javax.swing.JLabel lblTestMailResult;
    private javax.swing.JLabel lblTimeValue;
    private javax.swing.JLabel lblTimeValue1;
    private javax.swing.JRadioButton rbAutoDiscoverScale;
    private javax.swing.JRadioButton rbMostrarMensajes;
    private javax.swing.JTextField txtDBIP;
    private javax.swing.JTextField txtDBIP1;
    private javax.swing.JTextField txtDBName;
    private javax.swing.JTextField txtDBName1;
    private javax.swing.JPasswordField txtDBPass;
    private javax.swing.JPasswordField txtDBPass1;
    private javax.swing.JTextField txtDBPort;
    private javax.swing.JTextField txtDBPort1;
    private javax.swing.JTextArea txtDBQuery;
    private javax.swing.JTextField txtDBQuery1;
    private javax.swing.JTextField txtDBUser;
    private javax.swing.JTextField txtDBUser1;
    private javax.swing.JTextField txtItensMGVRutaConservacion;
    private javax.swing.JTextField txtItensMGVRutaExtra2;
    private javax.swing.JTextField txtItensMGVRutaImportar;
    private javax.swing.JTextField txtItensMGVRutaImportarNovedades;
    private javax.swing.JTextField txtItensMGVRutaIngredients;
    private javax.swing.JTextField txtItensMGVRutaIngredients1;
    private javax.swing.JTextField txtItensMGVRutaNutInfo;
    private javax.swing.JTextField txtItensMGVRutaRecetas;
    private javax.swing.JTextField txtItensMGVRutaTara;
    private javax.swing.JTextField txtMailAddress;
    private javax.swing.JTextField txtMailHost;
    private javax.swing.JPasswordField txtMailPass;
    private javax.swing.JTextField txtMailPort;
    private javax.swing.JTextField txtQendraPath;
    private javax.swing.JTextField txtRutaImportar;
    private javax.swing.JTextField txtRutaImportarNovedades;
    private javax.swing.JTextField txtRutaImportarRangos;
    private javax.swing.JTextField txtRutaLog;
    private javax.swing.JTextField txtRutaPsql;
    private javax.swing.JTextField txtRutalabels;
    private javax.swing.JPasswordField txtSegPass;
    private javax.swing.JTextField txtSeparador;
    private javax.swing.JTextField txtTimeValue;
    // End of variables declaration//GEN-END:variables

    @Override
    public void localeChanged(Locale locale, Locale locale1) {
        displayValues();
    }

    private void displayValues() {
        setTitle(LocaleUtil.getMessage("ShowConfigs.title"));
        lblRutaImportar.setText(LocaleUtil.getMessage("ShowConfigs.lblRutaImportar.text")); // NOI18N
        lblRutaLog.setText(LocaleUtil.getMessage("ShowConfigs.lblLogPath.text")); // NOI18N
        lblSeparador.setText(LocaleUtil.getMessage("ShowConfigs.lblSeparador.text")); // NOI18N
        btnAddingIp.setText(LocaleUtil.getMessage("ShowConfigs.btnAddingIp.text")); // NOI18N
        rbAutoDiscoverScale.setText(LocaleUtil.getMessage("ShowConfigs.rbAutoDiscoverScale.text")); // NOI18N
        rbMostrarMensajes.setText(LocaleUtil.getMessage("ShowConfigs.rbMostrarMensajes.text")); // NOI18N
        btnSave.setText(LocaleUtil.getMessage("ShowConfigs.btnSave.text")); // NOI18N
        btnFindLog.setText(LocaleUtil.getMessage("ShowConfigs.btnFindLog.text")); // NOI18N
        btnFindPathFull.setText(LocaleUtil.getMessage("ShowConfigs.btnFindPathFull.text")); // NOI18N
        btnDeleteIp.setText(LocaleUtil.getMessage("ShowConfigs.btnDeleteIp.text")); // NOI18N
        btnCancel.setText(LocaleUtil.getMessage("ShowConfigs.btnCancel.text")); // NOI18N

        /* Cargamos el config file */
        switch (ConfigFile.getFiletype()) {
            case ITENS_MGV:
                chkDeleteFileInputMGV.setText(LocaleUtil.getMessage("ShowConfigs.chkDeleteFileInput.text")); // NOI18N
                break;
            case ITENS_ERPtoMGV:
                chkDeleteFileInputERPtoMGV.setText(LocaleUtil.getMessage("ShowConfigs.chkDeleteFileInput.text")); // NOI18N
                break;
            default:
                chkDeleteFileInput.setText(LocaleUtil.getMessage("ShowConfigs.chkDeleteFileInput.text")); // NOI18N
                break;
        }

        /*rbSystelFormatFile.setText(LocaleUtil.getMessage("ShowConfigs.rbSystelFormatFile.text")); // NOI18N
        rbFiresFormatFile.setText(LocaleUtil.getMessage("ShowConfigs.rbFiresFormatFile.text")); // NOI18N
        rbIntellibuildFormatFile.setText(LocaleUtil.getMessage("ShowConfigs.rbIntellibuildFormatFile.text")); // NOI18N
         */
 /* COMO PRE-CONDICION, TIENEN QUE EXISTIR LOS ELMENTOS */
        cbx_file_format.getItemAt(0).replaceAll(cbx_file_format.getItemAt(0),
                LocaleUtil.getMessage("ShowConfigs.rbSystelFormatFile.text"));
        cbx_file_format.getItemAt(1).replaceAll(cbx_file_format.getItemAt(1),
                LocaleUtil.getMessage("ShowConfigs.rbFiresFormatFile.text"));
        cbx_file_format.getItemAt(2).replaceAll(cbx_file_format.getItemAt(2),
                LocaleUtil.getMessage("ShowConfigs.rbIntellibuildFormatFile.text"));
        cbx_file_format.getItemAt(3).replaceAll(cbx_file_format.getItemAt(3),
                LocaleUtil.getMessage("ShowConfigs.rbCotoFormatFile.text"));
        cbx_file_format.getItemAt(4).replaceAll(cbx_file_format.getItemAt(4),
                LocaleUtil.getMessage("ShowConfigs.rbDigiFormatFile.text"));
        cbx_file_format.getItemAt(6).replaceAll(cbx_file_format.getItemAt(6),
                LocaleUtil.getMessage("ShowConfigs.rbPVMexFormatFile.text"));
        cbx_file_format.getItemAt(7).replaceAll(cbx_file_format.getItemAt(7),
                LocaleUtil.getMessage("ShowConfigs.rbBizerba.text"));
        cbx_file_format.getItemAt(8).replaceAll(cbx_file_format.getItemAt(8),
                LocaleUtil.getMessage("ShowConfigs.rbSicar.text"));
        cbx_file_format.getItemAt(9).replaceAll(cbx_file_format.getItemAt(9),
                LocaleUtil.getMessage("ShowConfigs.rbItensMGV.text"));

        lblFormatoEntrada.setText(LocaleUtil.getMessage("ShowConfigs.lblFormatoEntrada.text")); // NOI18N
        lblRutaImportarNovedades.setText(LocaleUtil.getMessage("ShowConfigs.lblRutaImportarNovedades.text")); // NOI18N
        btnFindPathPartial.setText(LocaleUtil.getMessage("ShowConfigs.btnFindPathPartial.text")); // NOI18N
        lblRutaImportarRangos.setText(LocaleUtil.getMessage("ShowConfigs.lblRutaImportarRangos.text")); // NOI18N
        btnFindPathRange.setText(LocaleUtil.getMessage("ShowConfigs.btnFindPathRange.text")); // NOI18N
        lblIdioma.setText(LocaleUtil.getMessage("ShowConfigs.lblIdioma.text")); // NOI18N

        /* Solapa Qendra */
        cbxActivateQendra.setText(LocaleUtil.getMessage("ShowConfigs.cbxActivateQendra.text"));
        cbxQendraDefaultPath.setText(LocaleUtil.getMessage("ShowConfigs.cbxQendraDefaultPath.text"));
        btnFindQendraPath.setText(LocaleUtil.getMessage("ShowConfigs.btnFindQendraPath.text"));

        pack();
    }

    private void EmailViewRefresh() {
        txtMailAddress.setEnabled(cbxSendMail.isSelected());
        txtMailHost.setEnabled(cbxSendMail.isSelected());
        txtMailPass.setEnabled(cbxSendMail.isSelected());
        txtMailPort.setEnabled(cbxSendMail.isSelected());
        cbxMailDestiny.setEnabled(cbxSendMail.isSelected());
        btnMailDestAdd.setEnabled(cbxSendMail.isSelected());
        btnMailDestDel.setEnabled(cbxSendMail.isSelected());
        btnTestEmail.setEnabled(cbxSendMail.isSelected());
    }

    private void TempViewRefresh() {
//        if (cbxPeriod.getSelectedIndex() == 0)
        lblTimeValue1.setText(LocaleUtil.getMessage("Intervalo en minutos:"));
//        else
        lblTimeValue.setText(LocaleUtil.getMessage("Hora determinada:"));

        lblTimeValue.setEnabled(cbxPeriod.getSelectedIndex() == 1);
        lblTimeValue1.setEnabled(cbxPeriod.getSelectedIndex() == 0);
        txtTimeValue.setEnabled(cbxPeriod.getSelectedIndex() == 0);
        cbxTempHours.setEnabled(cbxPeriod.getSelectedIndex() == 1);
        btnAddHour.setEnabled(cbxPeriod.getSelectedIndex() == 1);
        btnDelHour.setEnabled(cbxPeriod.getSelectedIndex() == 1);

        RefreshTimerProps();

    }

    private void JPDatosImportacionViewRefresh() {
        if (cbx_file_format.getSelectedIndex() < 0) {
            return;
        }
        try {

            SetVisibleAllPanels(false);
            SetVisibleAllComponents(true);

            switch (ConfigFile.FileType.fromInteger(cbx_file_format.getSelectedIndex())) {
                case ITENS_MGV:

                    JPDBImportEleventas.setVisible(false);
                    JPFileImport.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPDBImport.setVisible(false);
                    JPItensMGV.setVisible(true);
                    chkDeleteFileInputMGV.setVisible(true);
                    break;
                case ITENS_MGV_DEPTO:
                    JPDBImportEleventas.setVisible(false);
                    JPFileImport.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPDBImport.setVisible(false);
                    JPItensMGV.setVisible(true);
                    chkDeleteFileInputMGV.setSelected(false);
                    chkDeleteFileInputMGV.setVisible(false);
                    break;
                case ITENS_ERPtoMGV:
                    JPDBImportEleventas.setVisible(false);
                    JPFileImport.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPDBImport.setVisible(false);
                    JPItensERPtoMGV.setVisible(true);
                    break;
                case IMP_DB:
                    JPDBImportEleventas.setVisible(false);
                    JPFileImport.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPDBImport.setVisible(true);
                    break;
                case MT8450:
                    JPDBImportEleventas.setVisible(false);
                    JPDBImport.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPFileImport.setVisible(true);
                    txtRutalabels.setVisible(false);
                    btnFindPathlabels.setVisible(false);
                    lblRutalabels.setVisible(false);
                    txtRutaImportarRangos.setVisible(false);
                    lblRutaImportarRangos.setVisible(false);
                    btnFindPathRange.setVisible(false);
                    break;
                case SYSTELRDC429:
                    JPDBImportEleventas.setVisible(false);
                    JPDBImport.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPFileImport.setVisible(true);
                    txtRutaImportarRangos.setVisible(false);
                    lblRutaImportarRangos.setVisible(false);
                    btnFindPathRange.setVisible(false);
                    txtRutaImportarNovedades.setVisible(false);
                    lblRutaImportarNovedades.setVisible(false);
                    btnFindPathPartial.setVisible(false);
                    break;
                case COTO:
                    JPDBImportEleventas.setVisible(false);
                    JPDBImport.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPFileImport.setVisible(true);
                    txtRutalabels.setVisible(true);
                    btnFindPathlabels.setVisible(true);
                    lblRutalabels.setVisible(true);
                    txtRutaImportarNovedades.setVisible(false);
                    lblRutaImportarNovedades.setVisible(false);
                    btnFindPathPartial.setVisible(false);
                    btnFindPathRange.setVisible(false);
                    txtRutaImportarRangos.setVisible(false);
                    lblRutaImportarRangos.setVisible(false);
                    lblSeparador.setVisible(false);
                    txtSeparador.setVisible(false);

                    break;
                case SYSTEL:
                    JPDBImportEleventas.setVisible(false);
                    JPDBImport.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPFileImport.setVisible(true);
                    txtRutalabels.setVisible(false);
                    btnFindPathlabels.setVisible(false);
                    lblRutalabels.setVisible(false);
                    txtRutaImportarNovedades.setVisible(false);
                    lblRutaImportarNovedades.setVisible(false);
                    btnFindPathPartial.setVisible(false);
                    btnFindPathRange.setVisible(true);
                    txtRutaImportarRangos.setVisible(true);
                    lblRutaImportarRangos.setVisible(true);
                    lblSeparador.setVisible(true);
                    txtSeparador.setVisible(true);

                    break;
                case ANONIMA:
                    JPDBImportEleventas.setVisible(false);
                    JPDBImport.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPFileImport.setVisible(true);
                    txtRutalabels.setVisible(false);
                    btnFindPathlabels.setVisible(false);
                    lblRutalabels.setVisible(false);
                    txtRutaImportarNovedades.setVisible(false);
                    lblRutaImportarNovedades.setVisible(false);
                    btnFindPathPartial.setVisible(false);
                    btnFindPathRange.setVisible(false);
                    txtRutaImportarRangos.setVisible(false);
                    lblRutaImportarRangos.setVisible(false);
                    lblSeparador.setVisible(false);
                    txtSeparador.setVisible(false);

                    break;
                case ELEVENTAS:
                    JPDBImportEleventas.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPFileImport.setVisible(false);
                    JPDBImport.setVisible(true);
                    btnFindDBPath.setEnabled(true);
                    txtRutalabels.setVisible(false);
                    btnFindPathlabels.setVisible(false);
                    lblRutalabels.setVisible(false);
                    txtRutaImportarNovedades.setVisible(false);
                    lblRutaImportarNovedades.setVisible(false);
                    btnFindPathPartial.setVisible(false);
                    btnFindPathRange.setVisible(false);
                    txtRutaImportarRangos.setVisible(false);
                    lblRutaImportarRangos.setVisible(false);
                    lblSeparador.setVisible(false);
                    txtSeparador.setVisible(false);
                    break;
                case MY_BUSINESS_POS:
                    JPDBImportEleventas.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPFileImport.setVisible(false);
                    JPDBImport.setVisible(true);
                    btnFindDBPath.setEnabled(false);
                    txtRutalabels.setVisible(false);
                    btnFindPathlabels.setVisible(false);
                    lblRutalabels.setVisible(false);
                    txtRutaImportarNovedades.setVisible(false);
                    lblRutaImportarNovedades.setVisible(false);
                    btnFindPathPartial.setVisible(false);
                    btnFindPathRange.setVisible(false);
                    txtRutaImportarRangos.setVisible(false);
                    lblRutaImportarRangos.setVisible(false);
                    lblSeparador.setVisible(false);
                    txtSeparador.setVisible(false);
                    break;
                case HANBAI_KATANA:
                    JPDBImportEleventas.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPFileImport.setVisible(false);
                    JPDBImport.setVisible(true);
                    btnFindDBPath.setEnabled(false);
                    txtRutalabels.setVisible(false);
                    btnFindPathlabels.setVisible(false);
                    lblRutalabels.setVisible(false);
                    txtRutaImportarNovedades.setVisible(false);
                    lblRutaImportarNovedades.setVisible(false);
                    btnFindPathPartial.setVisible(false);
                    btnFindPathRange.setVisible(false);
                    txtRutaImportarRangos.setVisible(false);
                    lblRutaImportarRangos.setVisible(false);
                    lblSeparador.setVisible(false);
                    txtSeparador.setVisible(false);
                    break;
                default:
                    JPDBImportEleventas.setVisible(false);
                    JPDBImport.setVisible(false);
                    JPItensERPtoMGV.setVisible(false);
                    JPItensMGV.setVisible(false);
                    JPFileImport.setVisible(true);
                    txtRutalabels.setVisible(false);
                    btnFindPathlabels.setVisible(false);
                    lblRutalabels.setVisible(false);
                    txtRutaImportarNovedades.setVisible(true);
                    lblRutaImportarNovedades.setVisible(true);
                    btnFindPathPartial.setVisible(true);
                    btnFindPathRange.setVisible(true);
                    txtRutaImportarRangos.setVisible(true);
                    lblRutaImportarRangos.setVisible(true);
                    lblSeparador.setVisible(true);
                    txtSeparador.setVisible(true);
                    break;
            }
        } catch (Exception e) {
            SetVisibleAllPanels(false);
            SetVisibleAllComponents(true);
            JPFileImport.setVisible(true);
            txtRutalabels.setVisible(false);
            btnFindPathlabels.setVisible(false);
            lblRutalabels.setVisible(false);
            txtRutaImportarNovedades.setVisible(true);
            lblRutaImportarNovedades.setVisible(true);
            btnFindPathPartial.setVisible(true);
            btnFindPathRange.setVisible(true);
            txtRutaImportarRangos.setVisible(true);
            lblRutaImportarRangos.setVisible(true);
            lblSeparador.setVisible(true);
            txtSeparador.setVisible(true);
        }

    }

    private void SetVisibleAllComponents(boolean visible) {
        txtRutaImportarRangos.setVisible(visible);
        lblRutaImportarRangos.setVisible(visible);
        btnFindPathRange.setVisible(visible);

    }

    private void SetVisibleAllPanels(boolean visible) {
        JPDBImport.setVisible(visible);
        JPFileImport.setVisible(visible);
        JPItensMGV.setVisible(visible);
        JPItensERPtoMGV.setVisible(visible);
    }

    public void LoadConfigPropFile(boolean bGraphMode) {
        configs = new ConfigProperties();
        try {
            configs.getPropValues();

            if (bGraphMode) {
                /* LLENAMOS EL COMBO BOX */
                cbx_file_format.removeAllItems();
                cbx_file_format.addItem("Systel");
                cbx_file_format.addItem("Fire");
                cbx_file_format.addItem("IntelliBuild");
                cbx_file_format.addItem("Coto");
                cbx_file_format.addItem("Digi");
                cbx_file_format.addItem("SDR");
                cbx_file_format.addItem("PV Mexico");
                cbx_file_format.addItem("Bizerba");
                cbx_file_format.addItem("Sicar");
                cbx_file_format.addItem("ItensMGV");
                cbx_file_format.addItem("MT8450");
                cbx_file_format.addItem("Retaguarda");
                cbx_file_format.addItem("Systel RDC429");
                cbx_file_format.addItem("La Anonima");
                cbx_file_format.addItem("Eleventas");
                cbx_file_format.addItem("My Business POS");
                cbx_file_format.addItem("ItensMGV Depto");
                cbx_file_format.addItem("Hanbai-Katana");


                /* Cargamos el config file */
                switch (ConfigFile.getFiletype()) {
                    case ITENS_MGV:
                    case ITENS_MGV_DEPTO:
                        txtItensMGVRutaImportarNovedades.setText(ConfigFile.getFilePathNovedades().trim());
                        chkDeleteFileInputMGV.setSelected(ConfigFile.getDeleteFileInput().equals("1"));
                        break;
                    case ITENS_ERPtoMGV:
                        txtItensMGVRutaImportar.setText(ConfigFile.getFilePath().trim());
                        chkDeleteFileInputERPtoMGV.setSelected(ConfigFile.getDeleteFileInput().equals("1"));
                        break;
                    default:
                        txtRutaImportar.setText(ConfigFile.getFilePath().trim());
                        txtRutalabels.setText(ConfigFile.getFileLabelsPath().trim());
                        txtRutaImportarNovedades.setText(ConfigFile.getFilePathNovedades().trim());
                        chkDeleteFileInput.setSelected(ConfigFile.getDeleteFileInput().equals("1"));
                        break;
                }

                txtRutaImportarRangos.setText(ConfigFile.getFilePathRangos().trim());
                txtRutaLog.setText(ConfigFile.getLogPath().trim());
                txtSeparador.setText(ConfigFile.getSeparator().trim());
                rbAutoDiscoverScale.setSelected(ConfigFile.getImportmanual().equals("1"));
                rbMostrarMensajes.setSelected(ConfigFile.getShowmessage().equals("1"));
                /*rbSystelFormatFile.setSelected(ConfigFile.getFiletype().equals("0"));
            rbFiresFormatFile.setSelected(ConfigFile.getFiletype().equals("1"));
            rbIntellibuildFormatFile.setSelected(ConfigFile.getFiletype().equals("2"));*/
                cbx_file_format.setSelectedIndex((ConfigFile.getFiletype().ordinal()));

                cbDBType.removeAllItems();
                cbDBType.addItem("PostgresSQL");
                cbDBType.addItem("Firebird");
                cbDBType.addItem("Microsoft SQL Server");
                cbDBType.addItem("MariaDB");
                //cbDBType.addItem("MySQL");
                //cbDBType.addItem("SQLite");
                cbDBType.setSelectedIndex(Integer.parseInt(ConfigFile.getImportDBType()));
                txtDBIP.setText(ConfigFile.getImportDBIP());
                txtDBName.setText(ConfigFile.getImportDBName());
                txtDBPort.setText(ConfigFile.getImportDBPort());
                txtDBUser.setText(ConfigFile.getImportDBUser());
                txtDBPass.setText(ConfigFile.getImportDBPass());
                txtDBQuery.setText(ConfigFile.getImportDBQuery());

                txtItensMGVRutaNutInfo.setText(ConfigFile.getItensMGVNutInfoFilePath());
                txtItensMGVRutaRecetas.setText(ConfigFile.getItensMGVReceingFilePath());
                txtItensMGVRutaTara.setText(ConfigFile.getItensMGVTaraFilePath());
                txtItensMGVRutaConservacion.setText(ConfigFile.getItensMGVConservacionFilePath());
                txtItensMGVRutaExtra2.setText(ConfigFile.getItensMGVExtra2FilePath());
                txtItensMGVRutaIngredients.setText(ConfigFile.getItensMGVIngredientsFilePath());
                txtItensMGVRutaIngredients1.setText(ConfigFile.getItensMGVIngredientsFilePath2());

                JPDatosImportacionViewRefresh();
// rbSDRFormatFile.setSelected(ConfigFile.getFiletype().equals("3"));
                bIsLoadCbo = true;

                //String[] langNames = LocaleUtil.get LangNames() Names();
                cbLang.removeAllItems();
                ComboItem cbiAux = new ComboItem(ConfigFile.getLocaleLang().getDisplayLanguage(), ConfigFile.getLocaleLang().getLanguage() + "_" + ConfigFile.getLocaleLang().getCountry());
                for (Locale sLocale : supportedLocales) {
                    cbLang.addItem(new ComboItem(sLocale.getDisplayLanguage(), sLocale.getLanguage() + "_" + sLocale.getCountry()));
                }
                cbLang.getModel().setSelectedItem(cbiAux);

                bIsLoadCbo = false;
                Locale laux = new Locale(ConfigFile.getLocaleLang().getLanguage(), ConfigFile.getLocaleLang().getCountry());
                LocaleUtil.setCurrentLocale(laux);
                LocaleUtil.addLocaleChangeListener(this);
                displayValues();

                cbIps.removeAllItems();
                for (String ip : ConfigFile.getIpv4()) {
                    cbIps.addItem(ip.trim());
                }

                txtDBName1.setText(ConfigFile.getEleventasPath());

                /* Habilitamos los botones si es necesario */
                cbIps.setEditable(true);
                cbIps.setEnabled(!rbAutoDiscoverScale.isSelected());
                btnAddingIp.setEnabled(!rbAutoDiscoverScale.isSelected());
                btnDeleteIp.setEnabled(!rbAutoDiscoverScale.isSelected());

                /* Vemos la solapa de Mensajes. */
                cbxSendMail.setSelected(ConfigFile.SendEmail());
                txtMailAddress.setText(ConfigFile.getEmailUser());
                txtMailPass.setText(ConfigFile.getEmailPass());
                txtMailHost.setText(ConfigFile.getEmailHost());
                txtMailPort.setText(ConfigFile.getEmailPort());

                cbxMailDestiny.removeAllItems();
                for (String dest : ConfigFile.getEmailDestinatary()) {
                    cbxMailDestiny.addItem(dest);
                }

                EmailViewRefresh();

                /* Vemos la solapa temporizador. */
                cbxPeriod.setSelectedIndex(Integer.parseInt(ConfigFile.getSchedulerPeriod()));

                cbxTempHours.removeAllItems();
                for (String hora : ConfigFile.getSchedulerHours()) {
                    cbxTempHours.addItem(hora.trim());
                }

                txtTimeValue.setText(ConfigFile.getSchedulerTimeValue());

                //cbxTempHours.setEditor(new MyComboBoxEditor());
                TempViewRefresh();

                this.jTabbedPane1.remove(4);

                txtRutaPsql.setText(ConfigFile.getPsqlPath());
                txtRutaPsql.setVisible(isWindows());
                lblRutaPsql.setVisible(isWindows());
                btnFindPsql.setVisible(isWindows());

                /* Vemos la solapa Qendra. */
                cbxActivateQendra.setSelected(ConfigFile.useQendra());
                cbxQendraDefaultPath.setSelected(ConfigFile.useQendraDefPath());
                txtQendraPath.setText(ConfigFile.getQendraPath());
                showQendraSubMenu();
            }
        } catch (IOException e) {
            System.out.println(e.toString());

        } catch (Exception e) {
            Logger.getLogger(ShowConfigs.class.getName()).log(Level.SEVERE, null, e);
            try {
                configs.setPropValuesDefault();
            } catch (IOException ex) {
                Logger.getLogger(ShowConfigs.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void RefreshTimerProps() {
        /* Solapa Temporizador */
        ConfigFile.setSchedulerPeriod(Integer.toString(cbxPeriod.getSelectedIndex()));
        ConfigFile.setSchedulerTimeValue(txtTimeValue.getText().trim());
        String hours = "";
        for (int i = 0; i < cbxTempHours.getItemCount(); i++) {
            if (!cbxTempHours.getItemAt(i).equals("")) {
                hours = hours + cbxTempHours.getItemAt(i);
                if (i < cbxTempHours.getItemCount() - 1) {
                    if (hours.trim().length() > 0) {
                        hours = hours.trim() + ";";
                    }
                }
            }
        }
        if (cbxTempHours.getItemCount() > 0) {
            ConfigFile.setSchedulerHours(hours.split("\\;"));
        }

    }

    public class MyComboBoxEditor implements ComboBoxEditor {

        private EditorPane editorPane;

        public MyComboBoxEditor() {
            editorPane = new EditorPane();
        }

        @Override
        public Component getEditorComponent() {
            return editorPane;
        }

        @Override
        public void setItem(Object anObject) {
            editorPane.setText(anObject == null ? null : anObject.toString());
        }

        @Override
        public Object getItem() {
            return editorPane.getText();
        }

        @Override
        public void selectAll() {
            editorPane.selectAll();
        }

        @Override
        public void addActionListener(ActionListener l) {
            editorPane.addActionListener(l);
        }

        @Override
        public void removeActionListener(ActionListener l) {
            editorPane.removeActionListener(l);
        }

    }

    public class EditorPane extends JPanel {

        DateFormat dateFormat = new SimpleDateFormat("HH:mm");
        DateFormatter dateFormatter = new DateFormatter(dateFormat);
        JFormattedTextField field = new JFormattedTextField(dateFormatter);
        String format = "##:##";
        MaskFormatter dateMask;

        public EditorPane() {

            dateFormat.setLenient(false);

            field = new JFormattedTextField(dateFormatter);

            try {
                dateMask = new MaskFormatter(format);
                dateMask.install(field);
                // Initialize with a valid time string
                field.setText("00:00");
                field.commitEdit();
            } catch (ParseException ex) {
                Logger.getLogger(ShowConfigs.class.getName()).log(Level.SEVERE, null, ex);
            }
            field.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    if (field.getText().trim().length() >= 5 && !(evt.getKeyChar() == KeyEvent.VK_DELETE || evt.getKeyChar() == KeyEvent.VK_BACK_SPACE)) {
                        evt.consume();
                    }
                }
            });

            setLayout(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();

            gbc.weightx = 1;
            gbc.fill = GridBagConstraints.HORIZONTAL;
            gbc.gridx = 0;
            gbc.ipady = 36;
            gbc.gridheight = 36;
            add(field, gbc);
        }

        @Override
        public void addNotify() {
            super.addNotify();
            field.requestFocusInWindow();
        }

        public void selectAll() {
            field.selectAll();
        }

        public void setText(String text) {
            field.setText(text);
        }

        public String getText() {
            return field.getText();
        }

        public void addActionListener(ActionListener listener) {
            field.addActionListener(listener);
        }

        public void removeActionListener(ActionListener listener) {
            field.removeActionListener(listener);
        }

    }

}
