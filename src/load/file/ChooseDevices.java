/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package load.file;

import com.ucod.lang.LocaleChangeListener;
import com.ucod.lang.LocaleUtil;
import com.ucod.swingplus.ModalResult;
import java.awt.BorderLayout;
import java.awt.Dialog;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ItemEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import static load.file.MainApp.SCALE_IP;
import static load.file.MainApp.SCALE_NAME;
import static load.file.MainApp.SCALE_NUMBER;
import static load.file.MainApp.isWindows;
import static load.file.MainApp.loadMapDeptoMGV;
import static load.file.MainApp.showMessage;
import load.file.Utils.ListItemDevices;
import org.joda.time.DateTime;

/**
 *
 * @author diego
 */
public class ChooseDevices extends javax.swing.JDialog implements LocaleChangeListener {

    private ModalResult modalResult;
    private boolean bImportOnlyPrices = false;
    public static boolean bImportUpdates = true;
    private List<String> SiP = null;
    public static List<SystelDBConnector.SystelDepto> lstDeptos = null;
    public static List<JCheckBox> lstCheckDepto = new ArrayList<>();

    private String[] selectedDevices = null;
    private ListItemDevices itemLista;
    public static HashMap<String, List<String>> map_DeptoMGV = new HashMap<String, List<String>>();

    /**
     * Creates new form ChooseDevices
     */
    public ChooseDevices(java.awt.Dialog parent, ModalityType modal, List<String> SiP) {
        super(parent, modal);
        initComponents();
        this.setBounds(new java.awt.Rectangle(0, 0, 800, 600));
        this.SiP = SiP;
        // Fill model

        RefreshOptions();
        loadMapDeptoMGV();

        init();

        try {
            optArchivoCompleto.setSelected(ConfigProperties.ConfigFile.getModeArchive().trim().equalsIgnoreCase("1"));
            optArchivoNovedades.setSelected(ConfigProperties.ConfigFile.getModeArchive().trim().equalsIgnoreCase("0"));

            optTodosLosDatos.setSelected(ConfigProperties.ConfigFile.getModeImport().trim().equalsIgnoreCase("1"));
            //optSoloPrecios.setSelected(ConfigProperties.ConfigFile.getModeImport().trim().equalsIgnoreCase("0"));

        } catch (Exception e) {
        }

        displayValues();
    }

    public static boolean getSelectedOptArchivoCompleto() {
        return optArchivoCompleto.isSelected();
    }

    public static void setSelectedOptArchivoCompleto(boolean status) {
        ChooseDevices.optArchivoCompleto.setSelected(status);
    }

    public static boolean getSelectedOptTodosLosDatos() {
        return optTodosLosDatos.isSelected();
    }

    public static void setSelectedOptTodosLosDatos(boolean status) {
        ChooseDevices.optTodosLosDatos.setSelected(status);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstScales = new javax.swing.JList<>();
        jpDeptos = new javax.swing.JPanel();
        btnEdit = new javax.swing.JButton();
        lblDeptos = new java.awt.Label();
        jSeparator9 = new javax.swing.JSeparator();
        jspDeptos = new javax.swing.JScrollPane();
        jpCheckbox = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        jSeparator7 = new javax.swing.JSeparator();
        optArchivoNovedades = new javax.swing.JRadioButton();
        optArchivoCompleto = new javax.swing.JRadioButton();
        jSeparator6 = new javax.swing.JSeparator();
        label1 = new java.awt.Label();
        jSeparator1 = new javax.swing.JSeparator();
        optTodosLosDatos = new javax.swing.JRadioButton();
        jSeparator8 = new javax.swing.JSeparator();
        jPanel7 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnConfig = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        btnCancel = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 650));
        setMinimumSize(new java.awt.Dimension(800, 650));
        setModal(true);
        setPreferredSize(new java.awt.Dimension(800, 650));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 650));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel2.setMinimumSize(new java.awt.Dimension(500, 10));
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 390));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setDoubleBuffered(true);

        lstScales.setAutoscrolls(false);
        lstScales.setDoubleBuffered(true);
        lstScales.setFixedCellHeight(48);
        lstScales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstScalesMouseClicked(evt);
            }
        });
        lstScales.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lstScalesPropertyChange(evt);
            }
        });
        lstScales.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                lstScalesVetoableChange(evt);
            }
        });
        lstScales.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstScalesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstScales);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel6.add(jPanel2, gridBagConstraints);

        jpDeptos.setLayout(new java.awt.GridBagLayout());

        btnEdit.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("load/file/Bundle"); // NOI18N
        btnEdit.setText(bundle.getString("ChooseDevices.btnEdit.text")); // NOI18N
        btnEdit.setMaximumSize(new java.awt.Dimension(80, 30));
        btnEdit.setMinimumSize(new java.awt.Dimension(80, 30));
        btnEdit.setPreferredSize(new java.awt.Dimension(80, 30));
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 1.0;
        jpDeptos.add(btnEdit, gridBagConstraints);

        lblDeptos.setText(bundle.getString("ChooseDevices.lblDeptos.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jpDeptos.add(lblDeptos, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        jpDeptos.add(jSeparator9, gridBagConstraints);

        jspDeptos.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jpCheckbox.setLayout(new javax.swing.BoxLayout(jpCheckbox, javax.swing.BoxLayout.PAGE_AXIS));
        jspDeptos.setViewportView(jpCheckbox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jpDeptos.add(jspDeptos, gridBagConstraints);

        btnSave.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        btnSave.setText(bundle.getString("ChooseDevices.btnSave.text")); // NOI18N
        btnSave.setMaximumSize(new java.awt.Dimension(120, 48));
        btnSave.setMinimumSize(new java.awt.Dimension(120, 48));
        btnSave.setPreferredSize(new java.awt.Dimension(120, 48));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.weightx = 1.0;
        jpDeptos.add(btnSave, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 8);
        jPanel6.add(jpDeptos, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridLayout(20, 0));

        label2.setText(bundle.getString("ChooseDevices.label2.text")); // NOI18N
        jPanel3.add(label2);
        jPanel3.add(jSeparator7);

        buttonGroup2.add(optArchivoNovedades);
        optArchivoNovedades.setText(bundle.getString("ChooseDevices.optArchivoNovedades.text")); // NOI18N
        optArchivoNovedades.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optArchivoNovedadesItemStateChanged(evt);
            }
        });
        optArchivoNovedades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optArchivoNovedadesActionPerformed(evt);
            }
        });
        jPanel3.add(optArchivoNovedades);

        buttonGroup2.add(optArchivoCompleto);
        optArchivoCompleto.setText(bundle.getString("ChooseDevices.optArchivoCompleto.text")); // NOI18N
        optArchivoCompleto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optArchivoCompletoItemStateChanged(evt);
            }
        });
        jPanel3.add(optArchivoCompleto);
        jPanel3.add(jSeparator6);

        label1.setText(bundle.getString("ChooseDevices.label1.text")); // NOI18N
        jPanel3.add(label1);
        label1.getAccessibleContext().setAccessibleName(bundle.getString("ChooseDevices.label1.AccessibleContext.accessibleName")); // NOI18N

        jPanel3.add(jSeparator1);

        buttonGroup1.add(optTodosLosDatos);
        optTodosLosDatos.setText(bundle.getString("ChooseDevices.optTodosLosDatos.text")); // NOI18N
        optTodosLosDatos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optTodosLosDatosItemStateChanged(evt);
            }
        });
        jPanel3.add(optTodosLosDatos);
        jPanel3.add(jSeparator8);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 8);
        jPanel6.add(jPanel3, gridBagConstraints);

        jPanel7.setOpaque(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jPanel7, gridBagConstraints);

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 5));

        btnConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/dsd/icons/settings21.png"))); // NOI18N
        btnConfig.setText(bundle.getString("ChooseDevices.btnConfig.text")); // NOI18N
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });
        jPanel5.add(btnConfig);
        jPanel5.add(jSeparator2);
        jPanel5.add(jSeparator3);
        jPanel5.add(jSeparator4);
        jPanel5.add(jSeparator5);

        btnCancel.setText(bundle.getString("ChooseDevices.btnCancel.text")); // NOI18N
        btnCancel.setPreferredSize(new java.awt.Dimension(100, 42));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel5.add(btnCancel);

        btnImport.setText(bundle.getString("ChooseDevices.btnImport.text")); // NOI18N
        btnImport.setEnabled(false);
        btnImport.setPreferredSize(new java.awt.Dimension(100, 42));
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });
        jPanel5.add(btnImport);

        jPanel1.add(jPanel5, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        modalResult = modalResult.CANCEL;
        LocaleUtil.removeLocaleChangeListener(this);
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void optTodosLosDatosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optTodosLosDatosItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            bImportOnlyPrices = false;
        } else {
            bImportOnlyPrices = true;
        }
    }//GEN-LAST:event_optTodosLosDatosItemStateChanged

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        int[] selectedIx = lstScales.getSelectedIndices();
        selectedDevices = new String[selectedIx.length];
        if (selectedIx.length <= 0) {
            return;
        }

        // Get all the selected items using the indices
        for (int i = 0; i < selectedIx.length; i++) {
            selectedDevices[i] = ((ListItemDevices) lstScales.getSelectedValues()[i]).getValue();
        }
        MainApp.timeStart = new DateTime();
        modalResult = modalResult.YES;
        LocaleUtil.removeLocaleChangeListener(this);
        dispose();
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        btnImport.setEnabled(false);
        ShowConfigs sc = new ShowConfigs();

        //sc.setModal(true);
        //sc.setAlwaysOnTop(true);
        sc.setModalityType(ModalityType.APPLICATION_MODAL);
        sc.pack();
        sc.setLocation(this.getLocation());
        sc.toFront();
        sc.setVisible(true);
        sc.dispose();
        sc = null;

        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                displayValues();
                MainApp.FindScales();
                RefreshOptions();
                loadMapDeptoMGV();
                init();
                return null;
            }
        };

        Window win = SwingUtilities.getWindowAncestor(this);

        JDialog dialog = new JDialog(win, "Dialog", Dialog.ModalityType.APPLICATION_MODAL);
        dialog.setBounds(MainApp.chooseDev.getBounds());
        dialog.setMinimumSize(MainApp.chooseDev.getSize());
        dialog.setUndecorated(true);
        dialog.setResizable(false);

        mySwingWorker.addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("state")) {
                    if (evt.getNewValue() == SwingWorker.StateValue.DONE) {
                        dialog.dispose();
                    }
                }
            }
        });
        mySwingWorker.execute();

        JPanel panel = new JPanel(new BorderLayout());

        JLabel jLabel1 = new javax.swing.JLabel();

        panel.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/systel/resources/wait2.gif"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("load/file/Bundle"); // NOI18N
        jLabel1.setFont(new java.awt.Font("Calibri", 0, 20));
        jLabel1.setText(java.util.ResourceBundle.getBundle("load/file/Bundle").getString("Waiting")); // NOI18N
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setIconTextGap(20);
        jLabel1.setOpaque(true);
        jLabel1.setPreferredSize(new java.awt.Dimension(80, 80));
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        panel.add(jLabel1, BorderLayout.CENTER);
        dialog.add(panel);
        dialog.pack();

        dialog.setLocationRelativeTo(MainApp.chooseDev);
        dialog.setVisible(true);

    }//GEN-LAST:event_btnConfigActionPerformed

    private void optArchivoNovedadesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optArchivoNovedadesItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            bImportUpdates = true;
        } else {
            bImportUpdates = false;
        }
    }//GEN-LAST:event_optArchivoNovedadesItemStateChanged

    private void optArchivoCompletoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optArchivoCompletoItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            bImportUpdates = false;
        } else {
            bImportUpdates = true;
        }
    }//GEN-LAST:event_optArchivoCompletoItemStateChanged

    private void optArchivoNovedadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optArchivoNovedadesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optArchivoNovedadesActionPerformed

    private void lstScalesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lstScalesPropertyChange


    }//GEN-LAST:event_lstScalesPropertyChange

    private void lstScalesVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_lstScalesVetoableChange

    }//GEN-LAST:event_lstScalesVetoableChange

    private void lstScalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstScalesMouseClicked
        btnImport.setEnabled(lstScales.getSelectedIndices().length > 0);
    }//GEN-LAST:event_lstScalesMouseClicked

    public static void setPropValues(HashMap<String, List<String>> map) throws IOException {
        Path path = null;
        if (isWindows()) {
            path = Paths.get("C:" + File.separator + "SYSTEL" + File.separator + "Importador" + File.separator + "MGVDepto.properties");
        } else {
            path = Paths.get(File.separator + "tmp" + File.separator + "MGVDepto.properties");
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(path.toString()))) {
            for (Map.Entry<String, List<String>> entry : map.entrySet()) {
                String key = entry.getKey();
                List<String> values = entry.getValue();

                // Escribir la clave
                writer.write(key + "|");

                // Escribir los valores
                for (String value : values) {
                    writer.write(value + "|");
                }
                writer.newLine();
            }
            writer.close();
        } catch (Exception e) {

        } finally {

        }

    }

//    public static void removeNonExistingItems(HashMap<String, List<String>> map_DeptoMGV, JList<String> lstScales) {
//        try {
//
//            // Obtener las claves de la JList
//            Set<String> keysInList = new HashSet<>();
//            List<String> selectedValuesList = lstScales.getSelectedValuesList();
//            for (String selectedValue : selectedValuesList) {
//                String key = selectedValue.substring(0, selectedValue.indexOf("|"));
//                keysInList.add(key);
//            }
//            // Remover los elementos del mapa que no existen en la JList
//            map_DeptoMGV.keySet().removeIf(key -> !keysInList.contains(key));
//        } catch (Exception e) {
//            System.err.println(e);
//        }
//    }
//    
    public static void removeNonExistingItems(HashMap<String, List<String>> map_DeptoMGV, JList lstScales) {
        // Obtener las claves de la JList
        Set<String> keysInList = new HashSet<>();
        ListModel<ListItemDevices> model = lstScales.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            ListItemDevices item = model.getElementAt(i);
            String key = item.getValue();
            key = key.substring(0, key.indexOf("|"));

            keysInList.add(key);

        }

        // Remover los elementos del mapa que no existen en la JList
        map_DeptoMGV.keySet().removeIf(key -> !keysInList.contains(key));
    }

    private void lstScalesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstScalesValueChanged
        if (ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.ITENS_MGV_DEPTO.toString())) {

            removeNonExistingItems(map_DeptoMGV, lstScales);

            if (map_DeptoMGV.size() > 0 && lstScales.getModel().getSize() > 0) {

                int[] selectedIndices = lstScales.getSelectedIndices();

                if (selectedIndices.length == 0) {
                    lstScales.setSelectedIndex(0);
                    return;
                }

                if (selectedIndices.length == 1) {
                    String key = ((ListItemDevices) lstScales.getSelectedValues()[0]).getValue();
                    key = key.substring(0, key.indexOf("|"));
                    // Completar datos cuando solo un elemento está seleccionado
                    for (JCheckBox depto : lstCheckDepto) {
                        depto.setSelected(false);
                    }
                    try {

                        for (String depto : map_DeptoMGV.get(key)) {
                            for (JCheckBox chkDepto : lstCheckDepto) {
                                if (depto.equalsIgnoreCase(chkDepto.getText().substring(0, chkDepto.getText().indexOf("-")))) {
                                    chkDepto.setSelected(true);
                                }
                            }
                        }

                    } catch (Exception e) {

                    }
                } else {
                    // Limpiar datos cuando más de un elemento o ninguno está seleccionado
                    for (JCheckBox depto : lstCheckDepto) {
                        depto.setSelected(false);
                    }
                }
            }
        }
    }//GEN-LAST:event_lstScalesValueChanged

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            int[] selectedIx = lstScales.getSelectedIndices();
            String aux = null;
            String IPs = null;
            String Dptos = null;
            String data = null;

            if (selectedIx.length <= 0) {
                return;
            }

            IPs = "";
            // Get all the selected items using the indices

            for (int i = 0; i < selectedIx.length; i++) {
                aux = ((ListItemDevices) lstScales.getSelectedValues()[i]).getValue();
                aux = aux.substring(0, aux.indexOf("|"));
                IPs += "\n" + aux;

                if (!map_DeptoMGV.containsKey(aux)) {
                    map_DeptoMGV.put(aux, new ArrayList<String>());
                }

                map_DeptoMGV.get(aux).clear();
                Dptos = "";

                for (JCheckBox jCheckBox : lstCheckDepto) {
                    if (jCheckBox.isSelected()) {
                        map_DeptoMGV.get(aux).add(jCheckBox.getText().substring(0, jCheckBox.getText().indexOf("-")));
                        Dptos += jCheckBox.getText() + " - ";
                    }
                }
                data = data + "\n" + aux;
            }

            try {
                Dptos = Dptos.substring(0, Dptos.lastIndexOf(" -"));
            } catch (Exception e) {
            }

            setPropValues(map_DeptoMGV);

            showMessage(LocaleUtil.getMessage("Atención."), java.util.ResourceBundle.getBundle("load/file/Bundle").getString("ChooseDevices.lblDeptos.text") + " " + Dptos + "\n" + java.util.ResourceBundle.getBundle("load/file/Bundle").getString("Actualizados") + IPs);

        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        btnImport.setEnabled(false);
        EditDeptos ed = new EditDeptos(this, DEFAULT_MODALITY_TYPE);

        ed.setLocation(this.getLocation());
        ed.toFront();
        ed.setVisible(true);
        
        
        RefreshOptions();
    }//GEN-LAST:event_btnEditActionPerformed

    public ModalResult getModalResult() {
        return modalResult;
    }

    public boolean getImportType() {
        return bImportOnlyPrices;
    }

    public boolean getImportFile() {
        return bImportUpdates;
    }

    public String[] getDevicesSelected() {
        return selectedDevices;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfig;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JPanel jpCheckbox;
    private javax.swing.JPanel jpDeptos;
    private javax.swing.JScrollPane jspDeptos;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label lblDeptos;
    private javax.swing.JList<String> lstScales;
    public static javax.swing.JRadioButton optArchivoCompleto;
    public static javax.swing.JRadioButton optArchivoNovedades;
    public static javax.swing.JRadioButton optTodosLosDatos;
    // End of variables declaration//GEN-END:variables

    @Override
    public void localeChanged(Locale locale, Locale locale1) {
        displayValues();
    }

    private void displayValues() {
        label2.setText(LocaleUtil.getMessage("ChooseDevices.label2.text")); // NOI18N
        optArchivoNovedades.setText(LocaleUtil.getMessage("ChooseDevices.optArchivoNovedades.text")); // NOI18N
        optArchivoCompleto.setText(LocaleUtil.getMessage("ChooseDevices.optArchivoCompleto.text")); // NOI18N
        label1.setText(LocaleUtil.getMessage("ChooseDevices.label1.text")); // NOI18N
        optTodosLosDatos.setText(LocaleUtil.getMessage("ChooseDevices.optTodosLosDatos.text")); // NOI18N
        btnConfig.setText(LocaleUtil.getMessage("ChooseDevices.btnConfig.text")); // NOI18N

        pack();
    }

    private void init() {
        String[] sip;
        final DefaultListModel model = new DefaultListModel();
        lstScales.removeAll();
        btnImport.setEnabled(false);

        for (String ip : this.SiP) {
            sip = ip.split("\\|");

//            itemLista = new ListItemDevices(sip[SCALE_IP].replace('/', ' ').trim() + " - " +sip[SCALE_NAME].replace('/', ' ').trim(), ip);
            itemLista = new ListItemDevices(LocaleUtil.getMessage("Nro:") + sip[SCALE_NUMBER] + LocaleUtil.getMessage("Nom:") + sip[SCALE_NAME] + LocaleUtil.getMessage("IP:") + sip[SCALE_IP].replace('/', ' ').trim(), ip);

            //model.addElement(sip[SCALE_IP].replace('/', ' ').trim());
            model.addElement(itemLista);
        }

        if (this.SiP.size() > 0) {
            btnImport.setEnabled(true);
        }

        lstScales.setModel(model);

        int start = 0;
        int end = model.getSize() - 1;
        if (end >= 0) {
            lstScales.setSelectionInterval(start, end);
        }

        lstScales.revalidate();

        LocaleUtil.addLocaleChangeListener(this);
    }

    private void RefreshOptions() {
        if (ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.ITENS_MGV.toString())
                || ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.ITENS_MGV_DEPTO.toString())
                || ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.SYSTELRDC429.toString())
                || ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.ANONIMA.toString())
                || ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.SYSTEL.toString())) {
            optArchivoCompleto.setSelected(ConfigProperties.ConfigFile.getModeArchive().trim().equalsIgnoreCase("0"));
            optArchivoNovedades.setSelected(ConfigProperties.ConfigFile.getModeArchive().trim().equalsIgnoreCase("1"));
            optArchivoCompleto.setEnabled(true);
            optArchivoNovedades.setEnabled(true);

            if (ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.ITENS_MGV_DEPTO.toString())
                    && !ConfigProperties.ConfigFile.getFilePathNovedades().trim().isEmpty()) {
                jpDeptos.setVisible(true);

                try {
                    if (lstDeptos == null) {
                        lstDeptos = FileLoader.loadMGVDepto();
                    }

                    jpCheckbox.removeAll();
                    jpCheckbox.revalidate();
                    lstCheckDepto.clear();
                    jspDeptos.revalidate();

                    for (SystelDBConnector.SystelDepto depto : lstDeptos) {
                        JCheckBox CheckBox = new javax.swing.JCheckBox();
                        CheckBox.setText(depto.getId()+"- "+depto.getName());
                        CheckBox.setMargin(new Insets(1, 1, 3, 3));
                        CheckBox.setVisible(true);

                        jpCheckbox.add(CheckBox);
                        lstCheckDepto.add(CheckBox);
                    }
                    jpCheckbox.revalidate();
                    jpCheckbox.repaint();
                    jspDeptos.revalidate();
                    jspDeptos.repaint();

                } catch (Exception e) {
                }
            } else {
                jpDeptos.setVisible(false);
            }
            jPanel3.setVisible(false);

        } else if (ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.COTO.toString())) {
            optArchivoCompleto.setSelected(true);
            optArchivoNovedades.setSelected(false);
            optArchivoCompleto.setEnabled(true);
            optArchivoNovedades.setEnabled(false);
            optArchivoCompleto.setVisible(false);
            optArchivoNovedades.setVisible(false);
            jSeparator7.setVisible(false);
            label2.setVisible(false);
            jSeparator6.setVisible(false);
            jPanel3.setVisible(true);
            jpDeptos.setVisible(false);
        } else if (ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.ITENS_ERPtoMGV.toString())) {
            optArchivoCompleto.setSelected(ConfigProperties.ConfigFile.getModeArchive().trim().equalsIgnoreCase("1"));
            optArchivoNovedades.setSelected(ConfigProperties.ConfigFile.getModeArchive().trim().equalsIgnoreCase("0"));
            optArchivoCompleto.setVisible(false);
            optArchivoNovedades.setVisible(false);
            jSeparator7.setVisible(false);
            label2.setVisible(false);
            jSeparator6.setVisible(false);
            jPanel3.setVisible(true);
            jpDeptos.setVisible(false);
        } else if (ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.ELEVENTAS.toString())
                || ConfigProperties.ConfigFile.getFiletype().toString().equalsIgnoreCase(ConfigProperties.ConfigFile.FileType.MY_BUSINESS_POS.toString())) {
            optArchivoCompleto.setSelected(ConfigProperties.ConfigFile.getModeArchive().trim().equalsIgnoreCase("1"));
            optArchivoNovedades.setSelected(ConfigProperties.ConfigFile.getModeArchive().trim().equalsIgnoreCase("0"));
            optArchivoCompleto.setVisible(false);
            optArchivoNovedades.setVisible(false);
            jSeparator7.setVisible(false);
            label2.setVisible(false);
            jSeparator6.setVisible(false);
        } else {
            optArchivoCompleto.setEnabled(true);
            optArchivoNovedades.setEnabled(true);
            optArchivoCompleto.setVisible(true);
            optArchivoNovedades.setVisible(true);
            jSeparator7.setVisible(true);
            label2.setVisible(true);
            jSeparator6.setVisible(true);
            jPanel3.setVisible(true);
            jpDeptos.setVisible(false);
        }
    }
}
